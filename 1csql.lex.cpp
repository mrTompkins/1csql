#line 2 "us\\1csql\\1csql.lex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <io.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 299
#define YY_END_OF_BUFFER 300
static yyconst short int yy_acclist[1547] =
    {   0,
      300,  298,  299,  297,  298,  299,  297,  299,  261,  298,
      299,  298,  299,  292,  298,  299,  261,  298,  299,  261,
      298,  299,  298,  299,  261,  298,  299,  261,  298,  299,
      257,  261,  298,  299,  261,  298,  299,  240,  298,  299,
      240,  298,  299,  298,  299,  269,  298,  299,  264,  298,
      299,  267,  298,  299,  298,  299,  298,  299,  281,  298,
      299,  281,  298,  299,  281,  298,  299,  281,  298,  299,
      281,  298,  299,  281,  298,  299,  281,  298,  299,  281,
      298,  299,  281,  298,  299,  281,  298,  299,  281,  298,
      299,  281,  298,  299,  281,  298,  299,  281,  298,  299,

      281,  298,  299,  281,  298,  299,  281,  298,  299,  281,
      298,  299,  281,  298,  299,  281,  298,  299,  281,  298,
      299,  281,  298,  299,  281,  298,  299,  281,  298,  299,
      281,  298,  299,  281,  298,  299,  261,  298,  299,  281,
      298,  299,  296,  298,  299,  296,  299,  296,  298,  299,
      299,  298,  299,  260,  298,  299,  258,  298,  299,  281,
      298,  299,  270,  252,  250,  292,  262,  251,  249,  293,
      240,  242,  294,  241,  291,  274,  268,  271,  272,  266,
      275,  284,  283,  281,  281,  281,  281,    8,  281,  281,
      281,  281,  281,  281,   18,  281,  281,  281,  281,  281,

      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,   89,  281,  281,   91,  281,  101,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  139,  281,  281,  144,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  210,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  263,  295,  259,  258,
      281,  250,  249,  273,  293,  245,  241,  255,  243,  254,

      265,  288,  290,  289,  282,    1,  281,    2,  281,  281,
      281,    6,  281,    7,  281,    9,  281,  281,  281,  281,
      281,  281,   15,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,   45,  281,
       50,  281,  281,  281,  281,  281,  281,   60,  281,  281,
      281,  281,  281,   66,  281,  281,  281,  281,  281,  281,
      281,  281,  281,   76,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,   97,  281,
      281,  281,  104,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  130,

      281,  281,  281,  281,  281,  135,  281,  281,  281,  281,
      281,  147,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  175,  281,  281,  281,  281,  281,
      281,  183,  281,  281,  281,  281,  281,  281,  281,  190,
      281,  197,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  222,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  236,  281,  281,  281,  259,    5,
        6,  281,  250,  249,  244,  285,  287,  286,  281,  281,

      281,  256,  281,  281,  281,  281,   16,  281,   17,  281,
       19,  281,  281,   21,  281,  281,   23,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,   43,  281,  281,  281,  281,  281,  281,
      281,   55,  281,  281,  281,  281,   62,  281,   63,  281,
       64,  281,   67,  281,  281,  281,   71,  281,  281,  281,
      281,  281,  281,  281,  281,   79,  281,  281,  281,  281,
      281,  281,   85,  281,  281,  281,  281,  281,  281,  281,
      208,  281,  185,  281,   97,  281,   13,  281,  281,   99,
      281,  281,  103,  281,  105,  281,  106,  281,  281,  281,

      109,  281,  110,  281,  281,  281,  113,  281,  281,  116,
      281,  117,  281,  120,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  137,  281,  281,  281,  281,
      281,  281,  281,  146,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  159,  281,  161,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      174,  281,  281,  281,  281,  281,  281,  184,  281,  281,
      186,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  204,  281,  205,  281,  206,
      281,  281,  281,  281,  281,  246,  281,  281,  213,  281,

      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  231,  281,  281,  281,  234,  281,  281,
      253,  237,  281,  281,    3,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,   24,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  280,  281,  281,   34,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  248,  281,   73,  281,   74,  281,  281,   77,  281,
      281,  281,   81,  281,   82,  281,  281,  281,  281,  281,
      104,  281,  281,   93,  281,   94,  281,  281,  281,  281,

      281,  281,  281,  108,  281,  111,  281,  112,  281,  281,
      281,  281,  281,  122,  281,  281,  281,  126,  281,  281,
      281,  132,  281,  281,  281,  281,  281,  281,  281,  281,
      145,  281,  148,  281,  281,  281,  281,  281,  281,  154,
      281,  281,  156,  281,  157,  281,  158,  281,  160,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      172,  281,  163,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      198,  281,  281,  281,  201,  281,  281,  281,  281,  281,
      281,  281,  281,  277,  281,  215,  281,  281,  281,  281,

      281,  281,  221,  281,  223,  281,  281,  281,  227,  281,
      281,  281,  281,  232,  281,  233,  281,  235,  281,  281,
      281,  281,  281,   11,  281,  281,   14,  281,  281,   22,
      281,  281,  281,   26,  281,  281,  281,  281,  281,  281,
      281,   33,  281,  281,   40,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,   54,  281,  281,
      281,  281,   61,  281,   65,  281,  281,   69,  281,  281,
       74,  281,  281,  281,  281,   83,  281,  281,  281,  281,
       90,  281,   92,  281,  281,   96,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  128,  281,

      281,  281,  281,  281,  138,  281,  281,  281,  142,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  165,  281,
      166,  281,  281,  281,  281,  170,  281,  171,  281,  173,
      281,  176,  281,  178,  281,  180,  281,  281,  281,  281,
      187,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  217,  281,  281,  218,  281,  281,  220,  281,  281,
      281,  227,  281,  281,  281,  281,  281,  281,    4,  281,
      281,   12,  281,   20,  281,  281,   25,  281,   27,  281,
      281,   29,  281,  281,  281,   32,  281,   39,  281,  281,

      281,  281,  281,  281,  281,  281,  281,   50,  281,   51,
      281,   52,  281,   53,  281,  281,  281,  281,   68,  281,
       72,  281,  281,   78,  281,  281,  281,  281,  281,  281,
      281,  281,  102,  281,  107,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  133,  281,  281,  281,
      281,  281,  149,  281,  281,  281,  281,  153,  281,  281,
      281,  164,  281,  167,  281,  168,  281,  281,  177,  281,
      281,  281,  281,  281,  188,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  276,  281,  281,  281,  281,
      281,  281,  212,  281,  281,  247,  281,  281,  281,  281,

      281,  229,  281,  230,  281,  281,  281,  281,  281,  281,
      281,   31,  281,  281,   41,  281,  281,  281,   44,  281,
       46,  281,  281,  281,  281,   56,  281,  281,   58,  281,
      281,   80,  281,  281,  281,  281,  281,  281,  281,   98,
      281,  281,  118,  281,  119,  281,  281,  281,  281,  281,
      281,  281,  281,  131,  281,  281,  134,  281,  141,  281,
      281,  281,  281,  281,  281,  281,  169,  281,  281,  281,
      281,  189,  281,  281,  281,  281,  281,  192,  281,  281,
      199,  281,  281,  281,  281,  281,  281,  209,  281,  211,
      281,  281,  219,  281,  224,  281,  225,  281,  281,  281,

      281,  239,  281,  281,   23,  281,   28,  281,  281,  281,
      281,  281,   42,  281,  278,  279,  281,  281,  281,  281,
      281,   75,  281,  281,  281,  281,  281,  281,  100,  281,
      114,  281,  281,  281,  124,  281,  281,  281,  281,  281,
      281,  150,  281,  151,  281,  152,  281,  155,  281,  281,
      281,  181,  281,  182,  281,  281,  281,  281,  281,  281,
      281,  281,  202,  281,  281,  207,  281,  214,  281,  216,
      281,  228,  281,  281,  281,  281,   30,  281,  281,  281,
      281,  281,   48,  281,   49,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  123,  281,  125,  281,  281,

      281,  281,   70,  143,  281,  162,  281,  281,  281,  281,
      281,  281,  193,  281,  281,  203,  281,  281,  281,  238,
      281,  281,  281,  281,  281,  281,  281,   59,  281,  281,
      281,   87,  281,   88,  281,   95,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,   35,  281,   36,  281,   38,  281,  281,  281,  281,
      281,  281,  121,  281,  281,  281,  281,  140,  281,  281,
      281,  281,  191,  281,  281,  281,  229,  281,  281,  281,
      281,   57,  281,   84,  281,  281,  281,  281,  129,  281,
      281,  281,  281,  281,  281,  200,  281,  226,  281,   10,

      281,  281,  281,  281,  115,  281,  281,  281,  281,  194,
      281,  281,  281,  281,   47,  281,  281,  281,  281,  281,
      281,  281,  281,   86,  281,  281,  281,  281,  281,  196,
      281,   37,  281,  281,  281,  281,  281,  127,  281,  136,
      281,  179,  281,  281,  195,  281
    } ;

static yyconst short int yy_accept[1265] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   12,   14,   17,   20,   23,   25,   28,
       31,   35,   38,   41,   44,   46,   49,   52,   55,   57,
       59,   62,   65,   68,   71,   74,   77,   80,   83,   86,
       89,   92,   95,   98,  101,  104,  107,  110,  113,  116,
      119,  122,  125,  128,  131,  134,  137,  140,  143,  146,
      148,  151,  152,  154,  157,  160,  163,  164,  164,  165,
      166,  166,  167,  168,  168,  169,  170,  170,  170,  171,
      171,  172,  173,  173,  174,  175,  175,  175,  175,  176,
      177,  178,  179,  180,  181,  182,  182,  183,  183,  183,

      183,  184,  184,  185,  186,  187,  188,  190,  191,  191,
      192,  193,  194,  195,  197,  198,  199,  200,  201,  202,
      203,  204,  205,  206,  207,  208,  209,  210,  211,  212,
      213,  214,  215,  216,  217,  218,  219,  220,  221,  222,
      224,  225,  227,  229,  230,  231,  232,  233,  234,  235,
      236,  237,  238,  239,  240,  241,  242,  243,  245,  246,
      248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
      258,  259,  260,  261,  262,  263,  264,  265,  266,  267,
      268,  269,  270,  271,  272,  273,  275,  276,  277,  278,
      279,  280,  281,  282,  283,  284,  284,  285,  286,  287,

      288,  289,  289,  290,  290,  291,  292,  292,  292,  293,
      293,  293,  293,  294,  294,  295,  296,  296,  297,  298,
      298,  299,  299,  300,  301,  302,  302,  303,  303,  304,
      304,  305,  306,  308,  310,  311,  312,  314,  316,  318,
      319,  319,  320,  321,  322,  323,  325,  326,  327,  328,
      329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
      339,  341,  343,  344,  345,  346,  347,  348,  350,  351,
      352,  353,  354,  356,  357,  358,  359,  360,  361,  362,
      363,  364,  366,  367,  368,  369,  370,  371,  372,  373,
      374,  375,  376,  377,  378,  379,  381,  382,  383,  385,

      386,  387,  388,  389,  390,  391,  392,  393,  394,  395,
      396,  397,  398,  399,  400,  402,  403,  404,  405,  406,
      408,  409,  410,  410,  411,  412,  414,  415,  416,  417,
      418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
      428,  429,  430,  431,  432,  433,  434,  435,  437,  438,
      439,  440,  441,  442,  444,  445,  446,  447,  448,  449,
      450,  452,  454,  455,  456,  457,  458,  459,  460,  461,
      462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
      472,  473,  474,  475,  477,  478,  479,  480,  481,  482,
      483,  484,  485,  485,  487,  488,  489,  489,  490,  490,

      493,  493,  494,  494,  495,  495,  496,  497,  498,  499,
      500,  501,  502,  503,  504,  505,  506,  507,  509,  511,
      513,  514,  516,  517,  519,  520,  521,  522,  523,  524,
      525,  526,  527,  528,  529,  530,  531,  532,  533,  534,
      536,  537,  538,  539,  540,  541,  542,  544,  545,  546,
      547,  549,  551,  553,  555,  556,  557,  559,  560,  561,
      562,  563,  564,  565,  566,  568,  569,  570,  571,  572,
      573,  575,  576,  577,  578,  579,  580,  581,  583,  585,
      587,  589,  590,  592,  593,  595,  597,  599,  600,  601,
      603,  605,  606,  607,  609,  610,  612,  614,  616,  617,

      618,  619,  620,  621,  622,  623,  624,  625,  626,  626,
      628,  629,  630,  630,  631,  632,  633,  634,  636,  637,
      638,  639,  640,  641,  642,  643,  644,  646,  648,  649,
      650,  651,  652,  653,  654,  655,  656,  657,  658,  659,
      660,  661,  663,  664,  665,  666,  667,  668,  670,  671,
      673,  674,  675,  676,  677,  678,  679,  680,  681,  682,
      683,  684,  685,  686,  688,  690,  692,  693,  694,  695,
      696,  698,  699,  701,  702,  703,  704,  705,  706,  707,
      708,  709,  710,  711,  712,  713,  714,  716,  717,  718,
      720,  721,  722,  724,  725,  725,  725,  725,  725,  727,

      728,  729,  730,  731,  732,  733,  734,  735,  736,  738,
      739,  740,  741,  742,  743,  744,  745,  746,  748,  749,
      751,  752,  753,  754,  755,  756,  757,  758,  759,  760,
      761,  762,  763,  764,  765,  766,  767,  768,  769,  770,
      771,  772,  774,  776,  778,  779,  781,  782,  783,  785,
      787,  788,  789,  790,  791,  793,  794,  796,  798,  799,
      800,  801,  802,  803,  804,  806,  808,  810,  811,  812,
      813,  814,  816,  817,  818,  820,  821,  822,  824,  825,
      826,  827,  827,  828,  829,  829,  830,  831,  833,  835,
      836,  837,  838,  839,  840,  842,  843,  845,  847,  849,

      851,  852,  853,  854,  855,  856,  857,  858,  859,  860,
      861,  863,  865,  866,  867,  868,  869,  870,  871,  872,
      873,  874,  875,  876,  877,  878,  879,  880,  881,  883,
      884,  885,  887,  888,  889,  890,  891,  892,  893,  894,
      895,  896,  898,  899,  900,  901,  902,  903,  905,  907,
      908,  909,  911,  912,  913,  914,  916,  918,  920,  921,
      922,  923,  924,  926,  927,  929,  930,  932,  933,  934,
      936,  937,  938,  939,  940,  941,  942,  944,  945,  947,
      948,  949,  950,  951,  952,  953,  954,  955,  956,  957,
      958,  960,  961,  962,  963,  965,  967,  968,  970,  971,

      973,  974,  975,  976,  978,  979,  980,  981,  983,  985,
      986,  988,  989,  990,  991,  992,  993,  994,  995,  996,
      997,  998,  999, 1001, 1002, 1003, 1004, 1005, 1005, 1007,
     1008, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
     1018, 1019, 1021, 1023, 1024, 1025, 1026, 1028, 1030, 1032,
     1034, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046,
     1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
     1057, 1058, 1059, 1060, 1061, 1062, 1062, 1064, 1065, 1067,
     1068, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079,
     1081, 1082, 1084, 1086, 1087, 1089, 1091, 1092, 1094, 1095,

     1096, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
     1108, 1110, 1112, 1114, 1116, 1117, 1118, 1119, 1121, 1123,
     1124, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1135,
     1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
     1147, 1149, 1150, 1151, 1151, 1151, 1152, 1153, 1155, 1156,
     1157, 1158, 1160, 1161, 1162, 1164, 1166, 1168, 1169, 1171,
     1172, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1181, 1182,
     1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
     1193, 1195, 1196, 1196, 1198, 1199, 1200, 1201, 1202, 1204,
     1206, 1207, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1217,

     1218, 1219, 1221, 1223, 1224, 1225, 1226, 1228, 1229, 1231,
     1232, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243,
     1245, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256,
     1257, 1259, 1259, 1259, 1261, 1262, 1263, 1264, 1265, 1266,
     1267, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278,
     1280, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1290, 1292,
     1293, 1293, 1295, 1297, 1299, 1300, 1301, 1302, 1304, 1305,
     1307, 1309, 1310, 1311, 1312, 1313, 1315, 1316, 1317, 1318,
     1319, 1320, 1321, 1322, 1324, 1325, 1326, 1327, 1328, 1329,
     1331, 1333, 1334, 1335, 1337, 1338, 1339, 1340, 1341, 1341,

     1341, 1342, 1344, 1346, 1348, 1350, 1351, 1352, 1354, 1356,
     1357, 1358, 1359, 1360, 1361, 1362, 1363, 1365, 1366, 1368,
     1370, 1371, 1372, 1374, 1375, 1376, 1377, 1379, 1380, 1381,
     1382, 1383, 1385, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
     1394, 1395, 1396, 1398, 1400, 1401, 1402, 1403, 1404, 1404,
     1406, 1408, 1409, 1410, 1411, 1412, 1413, 1415, 1416, 1418,
     1419, 1420, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1430,
     1431, 1432, 1434, 1436, 1438, 1439, 1440, 1441, 1442, 1443,
     1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452,
     1454, 1456, 1458, 1459, 1460, 1461, 1462, 1463, 1465, 1466,

     1467, 1468, 1469, 1470, 1471, 1472, 1473, 1475, 1476, 1477,
     1479, 1480, 1481, 1482, 1484, 1486, 1487, 1488, 1489, 1491,
     1492, 1493, 1494, 1495, 1496, 1498, 1500, 1502, 1503, 1504,
     1505, 1507, 1508, 1509, 1510, 1512, 1513, 1514, 1515, 1517,
     1518, 1519, 1520, 1521, 1522, 1523, 1524, 1526, 1527, 1528,
     1529, 1530, 1532, 1534, 1535, 1536, 1537, 1538, 1540, 1542,
     1544, 1545, 1547, 1547
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,    8,   15,   16,   17,   18,   19,   20,
       21,   22,   21,   21,   21,   23,   21,   24,    8,   25,
       26,   27,    1,   28,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
        1,   29,    1,    8,   30,   31,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,    1,   58,    1,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59
    } ;

static yyconst int yy_meta[60] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    1,    1,    6,    1,    7,    7,    7,
        7,    7,    7,    1,    1,    1,    1,    1,    1,    4,
        8,    9,    7,    9,    9,    7,    9,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,   10,    4,    4,    1,   11
    } ;

static yyconst short int yy_base[1288] =
    {   0,
        0,    0,   57,   58,   71,    0, 1678, 1677, 1708, 1711,
     1711, 1711, 1681,  128,    0, 1711, 1697,  129, 1691,  122,
      128, 1691,  119,  147, 1677,   37, 1675,   39,  149,  159,
      142,  150,  152,  163,  165,  175, 1652,  173,  185, 1654,
      142,  192,  193,  185,  195,  104, 1647,  209,  222,  214,
      230, 1666,  132,  216, 1661, 1660, 1637,    0, 1711, 1711,
     1677, 1711,  238, 1711,    0,  241, 1711,  254, 1711, 1688,
      282,    0, 1711,  261, 1711, 1682,  279, 1679,    0,  276,
      284,  295,  307, 1711,  314,   49,  324,    0, 1711, 1711,
     1663, 1711, 1711, 1711, 1711, 1686,  343, 1685, 1684,  338,

     1711, 1683,    0, 1650,  258,  317, 1650, 1632,  260,  163,
      313, 1636, 1630,    0,  313,  256,  316,  143, 1631,  268,
      328,  322, 1627, 1632, 1643, 1626,  199, 1641,  330, 1631,
     1622, 1626,  333, 1625, 1627,  170, 1616, 1630, 1615,    0,
     1621,  346,    0, 1629, 1624, 1607, 1619,  348,  342,  356,
     1610, 1625,  354,  358, 1608,  364,  361,  404, 1607, 1622,
     1605, 1619, 1605,  372, 1604, 1612, 1606,  387, 1612, 1609,
      357, 1609,  399, 1601, 1614,  369,  384, 1602, 1601,  291,
     1610, 1609,  373, 1605,  382,    0,  389,  412, 1605,  417,
     1605,  415,  403, 1587, 1597,    0, 1587, 1603, 1585, 1711,

     1711,  431, 1628,  443,    0,  424,  446,  458,  462,  463,
      459,  467,  468,  471, 1711,    0,  483,  489,  495,  505,
      464,  514,  520,    0, 1711,  481, 1711,  519, 1711,  392,
     1711, 1711,    0,    0, 1596, 1588,    0,    0,    0, 1584,
      475, 1583, 1574, 1587, 1594,    0, 1592, 1585, 1580,  510,
      450, 1588,  314, 1577,  510, 1575, 1587, 1568,  440,  515,
     1587,  433, 1584,  516, 1581, 1578, 1562,    0, 1579, 1564,
     1571, 1573,    0, 1564, 1575,  499, 1563, 1555, 1570, 1571,
     1559,  520, 1557, 1557, 1554, 1546, 1557, 1557, 1546, 1548,
     1557, 1552, 1555, 1538, 1553,  545, 1539, 1542, 1536, 1542,

      518, 1533, 1547, 1542, 1545, 1545,  527, 1541, 1531, 1547,
     1542, 1535, 1539, 1521, 1532, 1520, 1518, 1515, 1534,  555,
     1524,  537,  572, 1526, 1529,  540, 1515, 1512, 1528,  534,
     1527, 1522, 1525, 1520,  544, 1521, 1520, 1519, 1522,  546,
     1501, 1501, 1499, 1504, 1510, 1506, 1504, 1496, 1509, 1498,
     1507, 1492, 1509,    0, 1486, 1496, 1502, 1505, 1485, 1501,
      536,    0, 1485, 1501, 1482, 1488, 1483, 1485, 1477, 1482,
     1490, 1469, 1484,  550, 1487, 1476, 1475,  537, 1475, 1473,
     1478, 1485, 1478,    0, 1470, 1484, 1461,  559,  550, 1469,
     1472, 1459, 1499,    0, 1459, 1461,  579,  591,  592,    0,

      593,  595,  469,  594,  591,  607, 1711, 1711, 1711, 1457,
     1449, 1474, 1711, 1454, 1466, 1456, 1451,    0,    0,    0,
     1467,    0, 1460, 1465, 1454, 1463, 1450, 1457, 1452, 1455,
     1439, 1449, 1452, 1436, 1435, 1435, 1448, 1437, 1449,  586,
      592, 1437, 1448, 1427, 1422, 1426, 1427, 1426, 1434, 1430,
        0,    0, 1432,    0, 1424, 1419,    0, 1437, 1432, 1428,
     1415, 1419, 1428, 1423,    0, 1411, 1410, 1413, 1414, 1428,
     1427, 1407, 1400, 1411, 1404, 1401,  556,    0,    0,    0,
        0,  568,    0, 1419,    0,    0,    0, 1410, 1413,    0,
        0, 1397, 1397,    0, 1403,    0,  599,    0, 1398, 1405,

     1391, 1399,  552, 1404, 1401, 1390, 1389, 1381,  616,    0,
     1400, 1386, 1382,  589, 1384, 1383, 1391,    0, 1390,  598,
     1397, 1379, 1391, 1390, 1383, 1388, 1373,    0, 1373, 1366,
     1388, 1375, 1386, 1385, 1376, 1366, 1365, 1371, 1361, 1375,
     1358,    0, 1365, 1363, 1373, 1366, 1356,    0, 1361,    0,
     1359, 1362, 1361,  606, 1345, 1348, 1366, 1346, 1356, 1344,
     1358, 1347, 1352,    0,    0, 1341,  603, 1347, 1351, 1377,
        0, 1335,    0, 1341, 1333, 1338, 1349, 1344, 1330, 1344,
     1341,  606, 1342, 1337, 1337, 1335,    0, 1338, 1337,    0,
     1336, 1711, 1341, 1333,  639,  640,  636,  637,    0, 1312,

     1328, 1331, 1330, 1314, 1308, 1328, 1326, 1327,    0, 1309,
     1314, 1313, 1306, 1322, 1306, 1309, 1304,    0, 1316,    0,
     1306, 1301, 1317,  617, 1308, 1301, 1306, 1309, 1312, 1294,
     1299, 1305, 1304, 1299, 1294, 1292, 1300, 1298, 1298, 1283,
     1292,    0,    0,  636, 1277,    0, 1292, 1293,    0,    0,
     1290, 1280,  611, 1290,    0, 1289,    0,    0, 1274, 1272,
     1286,  598, 1270, 1275,    0,    0,    0, 1268, 1275, 1281,
     1267,    0, 1271, 1278,    0, 1277, 1272,    0, 1279, 1270,
     1275, 1253, 1258, 1266, 1258, 1264, 1258,    0,    0, 1259,
     1250, 1265, 1249, 1249,    0, 1262,    0,    0,    0,    0,

     1260, 1248, 1244, 1257, 1241, 1257, 1241, 1249, 1243, 1251,
        0,    0, 1239, 1253, 1249, 1232, 1231, 1249, 1240, 1243,
     1246, 1240, 1236, 1243, 1230, 1239, 1240, 1222, 1230, 1231,
     1219,    0, 1218, 1221, 1214, 1219, 1227, 1222, 1225, 1711,
     1215,  660, 1223, 1204, 1215, 1211, 1219,    0,    0, 1222,
     1213, 1202, 1206, 1218, 1204,    0,    0,    0, 1204, 1207,
     1210, 1200,    0, 1199,    0, 1207,    0, 1191, 1205,    0,
     1189, 1199, 1187, 1205, 1184, 1184,    0, 1174,    0, 1164,
     1168, 1140, 1137, 1126,  619, 1139, 1119, 1112, 1084, 1096,
        0, 1087, 1053, 1057,    0,    0, 1055,    0, 1034,    0,

     1034, 1027, 1016,    0, 1017, 1009, 1012,    0,    0,  985,
        0,   20,   98,  129,  137,  227,  270,  352,  376,  481,
      637,  490,  532,  624,  628,  621,  630,  634,    0,  641,
      633,  621,  647,  644,  641,  642,  643,  628,  633,  641,
      651,    0,    0,  653,  654,  657,    0,    0,    0,  642,
      663,    0,  654,  644,  651,    0,  654,  658,  661,  657,
      669,  666,  652,  659,  660,  667,  696,  676,  677,  678,
      660,  657,  668,  665,  680,  714,    0,  673,    0,  683,
        0,  669,  677,    0,  690,  674,  686,  679,  683,    0,
      693,    0,    0,  692,    0,    0,  683,    0,  690,  695,

        0,  702,  697,  699,  702,  701,  689,  690,  688,  695,
        0,    0,    0,    0,  706,  698,  693,    0,    0,  700,
        0,  696,  708,  715,  716,  700,  718,  710,    0,    0,
      710,  722,  705,  711,  715,  714,  725,  717,  719,  714,
        0,  729,  730,  717,  728,  734,  728,    0,  726,  728,
      728,    0,  726,  742,    0,    0,    0,  726,    0,  734,
      726,  734,  730,    0,  748,  753,  750,  742,  739,  751,
      748,  751,  739, 1711,  746,  743,  742,  750,  744,  758,
        0,  761,  755,    0,  764,  764,  765,  753,  771,    0,
      759,  762,  757,  758,  763,  764,    0,  775,  761,  801,

      802,    0,    0,  768,  764,  771,    0,  777,  769,  781,
        0,  774,  772,  770,  777,  784,  774,    0,  792,    0,
        0,  780,  784,  780,  777,  782,  794,  799,    0,  806,
        0,  786,  804,    0,  796,  795,  803,  797,  807,  808,
        0,  805,  810,  798,    0,  799,  819,  807,  800,    0,
      807,    0,  823,  816,  799,  820,  810,    0,    0,  823,
      816,    0,    0,  810,  805,  828,  812,    0,  828,    0,
        0,  814,  834,  827,  818,    0, 1711, 1711,  819,  834,
      836,  822,  827,    0,  825,  829,  825,  832,  825,    0,
      829,  840,  848,    0,  831,  849,  850,  834,  836,  855,

      832,    0,    0,    0,    0,  839,  856,    0,    0,  855,
      855,  863,  854,  857,  855,  886,    0,  863,    0,    0,
     1711,  848,    0,  849,  862,  858,    0,  852,  860,  869,
      870,    0,    0,  856,  854,  869,  860,  875,  877,  877,
      863,  864,    0,    0,  867,  871,  872, 1711,  868,    0,
        0,  871,  871,  876,  874,  878,    0,  879,    0,  894,
      891,    0,  892,  893,  894,  882,  898,  893,    0,  883,
      899,    0,    0,    0,  904,  881,  892,  894,  910,  905,
      896,  891,  892,  909,  901,  907,  904,  900,  905,    0,
      901,    0,  906,  919,  898,  921,  912,    0,  907,  923,

      926, 1711,  910,  918,  917,  913,    0,  919,  918,    0,
      915,  916,  923,    0,    0,  923,  923,  935,    0,  932,
      937,  923,  940,  924,    0,    0,    0,  945,  943,  934,
        0,  946,  936,  948,    0,  953,  941,  941,    0,  951,
      941,  945,  943,  941,  940,  945,    0,  948,  948,  950,
      950,    0,    0,  962,  960,  964,  946,    0,    0,    0,
      951,    0, 1711, 1001, 1012, 1023, 1034, 1040, 1048, 1058,
     1066, 1077, 1085, 1096, 1107, 1118, 1123, 1132, 1143, 1154,
     1165, 1170, 1179, 1190, 1201, 1212, 1223
    } ;

static yyconst short int yy_def[1288] =
    {   0,
     1263,    1, 1264, 1264, 1263,    5,    1,    1, 1263, 1263,
     1263, 1263, 1263, 1265, 1266, 1263, 1263, 1267, 1263, 1263,
     1263, 1263, 1268, 1263, 1263, 1263, 1263, 1263, 1269, 1270,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1263, 1271, 1263, 1263,
     1263, 1263, 1272, 1263, 1273, 1271, 1263, 1265, 1263, 1263,
     1274, 1266, 1263, 1267, 1263, 1263, 1275, 1263, 1276, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1277, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1278, 1269, 1279, 1280, 1270,

     1263, 1281, 1271, 1271, 1271, 1271, 1271, 1271, 1263, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1282, 1271, 1271, 1271, 1263,

     1263, 1272, 1263, 1283, 1273, 1271, 1284, 1265, 1265, 1274,
     1285, 1267, 1267, 1275, 1263, 1276, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1277, 1263, 1278, 1263, 1279, 1263, 1280,
     1263, 1263, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1263, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,

     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1263, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1282, 1271, 1271, 1271, 1272, 1272, 1283, 1271,

     1286, 1284, 1287, 1285, 1263, 1263, 1263, 1263, 1263, 1271,
     1271, 1271, 1263, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,

     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1263, 1271,
     1271, 1271, 1263, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1263, 1271, 1271, 1284, 1286, 1285, 1287, 1271, 1271,

     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1263, 1271, 1271, 1263, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,

     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1263,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,

     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1263, 1271, 1271,
     1263, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1263, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,

     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1263, 1263, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1263, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1263, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,

     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1263, 1263, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1263, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1263, 1263, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1263, 1263,

     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1263, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1263, 1263, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1263,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,

     1271, 1263, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271,    0, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263
    } ;

static yyconst short int yy_nxt[1771] =
    {   0,
       10,   11,   12,   13,   14,   15,   10,   16,   17,   18,
       19,   16,   16,   16,   20,   21,   22,   23,   24,   24,
       24,   24,   24,   25,   26,   27,   28,   29,   10,   10,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   60,
       60,   90,   91,   92,   94,   95,  221,  221,  480,   61,
       61,   10,   10,   62,   10,   63,   10,   10,   10,   10,
       10,   10,   10,   64,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   10,   65,
       69,   75,   70,  927,   85,  163,   79,   80,   76,   81,
       81,   81,   81,   81,   81,   82,   82,   82,   82,   82,
       82,   86,  164,   96,   87,  165,   71,   77,   98,  109,
      928,  101,   85,   83,   81,   81,   81,   81,   81,   81,
      193,  194,  929,   88,  102,  102,  104,  146,  257,   99,
      195,  147,   87,  115,  105,  110,  106,  102,  258,  111,
      116,  107,  112,  108,  120,  113,  125,  117,  121,  242,

      118,  285,  122,  119,  137,  114,  130,  126,  123,  127,
      131,  124,  138,  243,  128,  286,  155,  132,  139,  129,
      133,  140,  141,  134,  151,  196,  135,  148,  152,  142,
      156,  149,  153,  273,  143,  144,  157,  150,  154,  158,
      167,  159,  203,  160,  168,  182,  161,  162,  169,  183,
      274,  170,  184,  185,  171,  172,   69,  173,   70,  186,
      174,  197,  187,   75,  930,  175,  204,  176,  177,  178,
       76,  179,  180,  181,  188,  104,  189,  241,  241,  190,
      191,   75,   71,  105,   69,  206,  209,  251,  213,   77,
      107,  252,  108,   82,   82,   82,   82,   82,   82,   85,

      234,   81,   81,   81,   81,   81,   81,  214,  235,  931,
      210,   83,   82,   82,   82,   82,   82,   82,  260,   87,
      217,  217,  363,  261,  218,  218,  218,  218,  218,  218,
       83,  219,  219,  219,  219,  219,  219,  222,  222,  364,
      101,  223,  223,  223,  223,  223,  223, 1263,  236,  220,
      244,  237, 1263,  102,  102,  249,  426,  245,  253,  254,
      255,  262,  250,  246,  263,  427,  102,  256,  232,  276,
      264,  267,  238, 1263,  268,  281,  277,  265,  266,  301,
      291,  282,  292,  303,  302,  304,  305,  306,  313,  307,
      293,  294,  315,  318,  231,  295,  296,  932,  314,  347,

      308,  309,  316,  321,  322,  323,  323,  329,  319,  310,
      348,  330,  357,  358,  320,  359,  367,  331,  335,  360,
      373,  368,  409,  336,  337,  371,  372,  369,  374,  338,
      933,  339,  350,  340,  341,  203,  342,  343,  389,  344,
      375,  351,  390,  352,  376,  353,  377,  398,  383,  354,
       70,  378,  384,  379,  380,  236,  385,  387,  400,  204,
       69,  381,   70,  388,   69,   69,  402,  209,   76,   75,
       75,  399,  442,   75,  401,  443,   76,  404,  404,  238,
      213,  221,  221,  227,  413,  407,   71,  403,  437,  438,
       71,  210,  241,  241,  423,   77,   77,  598,  424,  214,

      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  219,  219,  219,  219,  219,  219,  405,  405,
      934,  229,  406,  406,  406,  406,  406,  406,  408,  938,
      220,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  421,  429,  422,  439,  445,  456,  457,
      440,  446,  488,  463,  430,  464,  509,  509,  495,  431,
      432,  939,  433,  478,  479,  554,  480,  481,  496,  511,
      489,  555,  512,  323,  323,  516,  517,  521,  527,  522,
      482,  533,  574,  203,  575,  556,  528,  569,  534,  557,
      483,  584,  585,  570,  587,  398,  398,  402,  588,  402,

      659,  675,  676,  404,  660,  661,  513,  204,  406,  406,
      406,  406,  406,  406,  586,  624,  662,  509,  509,  204,
      399,  596,  403,  401,  406,  406,  406,  406,  406,  406,
      626,  669,  686,  692,  687,  627,  625,  693,  723,  724,
      750,  628,  736,   70,  402,   76,  404,  813,  781,  670,
      814,  682,  908,  737,  806,  725,  751,  800,  795,  940,
      807,  876,  876,  909,  403,  598,  782,  401,  596,  935,
      941,  942,  943,  944,  911,  945,  936,  946,  947,  948,
      949,  950,  951,  952,  953,  954,  955,  937,  956,  957,
      958,  959,  960,  961,  962,  963,  964,  965,  966,  967,

      968,  969,  970,  971,  972,  973,  974,  976,  977,  978,
      478,  979,  980,  981,  982,  876,  876,  984,  985,  986,
      987,  988,  989,  990,  991,  992,  993,  994,  995,  996,
      997,  998,  999, 1000, 1001,  975, 1002, 1003, 1004, 1005,
     1006, 1007, 1008, 1009, 1010,  983, 1011, 1012, 1013, 1015,
     1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1014,
     1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1028, 1034,
     1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
      479, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
     1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,

     1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
     1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
     1086, 1087, 1088, 1089, 1090, 1074, 1075, 1091, 1092, 1093,
     1094, 1095, 1094, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
     1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
     1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
     1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
     1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
     1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
     1153, 1154, 1155, 1156, 1157, 1158,  974, 1159, 1160, 1161,

     1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
     1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
     1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
     1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
     1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
     1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
     1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
     1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
     1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
     1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,

     1262,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   72,  926,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   81,   81,  925,  924,   81,
       97,   97,   97,   97,   97,   97,   97,   97,  100,  100,
      100,  100,  100,  100,  100,  923,  100,  100,  100,  103,
      922,  921,  103,  920,  103,  103,  103,  202,  919,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  205,  918,
      917,  205,  916,  205,  205,  205,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  216,  915,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  224,
      914,  224,  226,  226,  913,  226,  226,  226,  226,  226,
      226,  226,  226,  228,  228,  228,  228,  912,  228,  228,
      228,  228,  228,  228,  230,  230,  230,  230,  230,  230,
      230,  911,  230,  230,  230,  102,  102,  102,  102,  102,
      102,  102,  910,  102,  102,  102,  393,  907,  393,  397,
      906,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      207,  905,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  211,  904,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  595,  903,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  597,  902,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  901,  900,  899,  898,  897,  896,
      895,  894,  893,  892,  891,  890,  889,  888,  887,  886,
      885,  884,  883,  882,  881,  880,  879,  878,  877,  875,
      874,  873,  872,  871,  870,  869,  868,  867,  866,  865,
      864,  863,  862,  861,  860,  859,  858,  857,  856,  855,
      854,  853,  852,  851,  850,  849,  848,  847,  846,  845,
      844,  843,  842,  841,  712,  840,  839,  838,  837,  836,

      835,  834,  833,  832,  831,  830,  829,  828,  827,  826,
      825,  824,  823,  822,  821,  820,  819,  818,  817,  816,
      815,  812,  811,  810,  809,  808,  805,  804,  803,  802,
      801,  799,  798,  797,  796,  795,  794,  793,  792,  791,
      790,  789,  788,  787,  786,  785,  784,  783,  780,  779,
      778,  777,  776,  775,  774,  773,  772,  771,  770,  769,
      768,  767,  766,  765,  481,  764,  763,  762,  761,  760,
      759,  758,  757,  756,  755,  754,  753,  752,  749,  748,
      747,  746,  745,  744,  743,  742,  741,  740,  739,  738,
      735,  734,  733,  732,  731,  730,  729,  728,  727,  726,

      722,  721,  720,  719,  718,  717,  716,  715,  714,  713,
      712,  711,  710,  709,  708,  707,  706,  705,  704,  703,
      702,  701,  700,  699,  698,  697,  696,  695,  694,  691,
      690,  689,  688,  685,  684,  683,  681,  680,  679,  678,
      677,  674,  673,  672,  671,  668,  667,  666,  665,  664,
      663,  658,  657,  656,  655,  654,  653,  652,  651,  650,
      649,  648,  647,  646,  645,  644,  643,  642,  641,  640,
      639,  638,  637,  636,  635,  634,  633,  632,  631,  630,
      629,  623,  622,  621,  620,  619,  618,  617,  616,  615,
      614,  613,  612,  611,  610,  609,  608,  607,  606,  605,

      604,  603,  602,  601,  600,  599,  594,  593,  592,  591,
      590,  589,  583,  582,  581,  580,  579,  578,  577,  576,
      573,  572,  571,  568,  567,  566,  565,  564,  563,  562,
      561,  560,  559,  558,  553,  552,  551,  550,  549,  548,
      547,  546,  545,  544,  543,  542,  541,  540,  539,  538,
      537,  536,  535,  532,  531,  530,  529,  526,  525,  524,
      523,  520,  519,  518,  515,  514,  510,  508,  507,  506,
      505,  504,  503,  502,  501,  500,  499,  498,  497,  494,
      493,  492,  491,  490,  487,  486,  485,  484,  477,  476,
      475,  474,  473,  472,  471,  470,  469,  468,  467,  466,

      465,  462,  461,  460,  459,  458,  455,  454,  453,  452,
      451,  450,  449,  448,  447,  444,  441,  436,  435,  434,
      428,  425,  420,  419,  418,  417,  416,  415,  414,  412,
      411,  410,  202,  396,  395,  394,  392,  391,  386,  382,
      370,  366,  365,  362,  361,  356,  355,  349,  346,  345,
      334,  333,  332,  328,  327,  326,  325,  324,  317,  312,
      311,  300,  299,  298,  297,  290,  289,  288,  287,  284,
      283,  280,  279,  278,  275,  272,  271,  270,  269,  259,
      248,  247,  240,  239,  233,  101,  231,  229,  227,  225,
      215,  211,  207,  201,  200,  199,  198,  192,  166,  145,

      136,   93,   89,   84,   78,   73,   67, 1263,   66,   66,
        9, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263
    } ;

static yyconst short int yy_chk[1771] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        4,   26,   26,   26,   28,   28,   86,   86,  812,    3,
        4,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
       14,   18,   14,  813,   23,   46,   20,   20,   18,   20,
       20,   20,   20,   20,   20,   21,   21,   21,   21,   21,
       21,   23,   46,   29,   23,   46,   14,   18,   29,   32,
      814,   30,   24,   21,   24,   24,   24,   24,   24,   24,
       53,   53,  815,   23,   30,   30,   31,   41,  118,   29,
       53,   41,   24,   33,   31,   32,   31,   30,  118,   32,
       33,   31,   32,   31,   34,   32,   35,   33,   34,  110,

       33,  136,   34,   33,   38,   32,   36,   35,   34,   35,
       36,   34,   38,  110,   35,  136,   44,   36,   38,   35,
       36,   39,   39,   36,   43,   54,   36,   42,   43,   39,
       44,   42,   43,  127,   39,   39,   44,   42,   43,   45,
       48,   45,   63,   45,   48,   50,   45,   45,   48,   50,
      127,   48,   50,   50,   48,   49,   68,   49,   68,   50,
       49,   54,   50,   74,  816,   49,   63,   49,   49,   49,
       74,   49,   49,   49,   51,   66,   51,  109,  109,   51,
       51,   77,   68,   66,   71,   66,   71,  116,   77,   74,
       66,  116,   66,   80,   80,   80,   80,   80,   80,   81,

      105,   81,   81,   81,   81,   81,   81,   77,  105,  817,
       71,   80,   82,   82,   82,   82,   82,   82,  120,   81,
       83,   83,  180,  120,   83,   83,   83,   83,   83,   83,
       82,   85,   85,   85,   85,   85,   85,   87,   87,  180,
      100,   87,   87,   87,   87,   87,   87,   97,  106,   85,
      111,  106,   97,  100,  100,  115,  253,  111,  117,  117,
      117,  121,  115,  111,  121,  253,  100,  117,  100,  129,
      121,  122,  106,   97,  122,  133,  129,  121,  121,  148,
      142,  133,  142,  149,  148,  149,  149,  150,  153,  150,
      142,  142,  154,  156,  230,  142,  142,  818,  153,  171,

      150,  150,  154,  157,  157,  158,  158,  164,  156,  150,
      171,  164,  176,  176,  156,  177,  183,  164,  168,  177,
      187,  183,  230,  168,  168,  185,  185,  183,  187,  168,
      819,  168,  173,  168,  168,  202,  168,  168,  193,  168,
      187,  173,  193,  173,  188,  173,  188,  204,  190,  173,
      207,  188,  190,  188,  188,  206,  190,  192,  206,  202,
      208,  188,  208,  192,  209,  210,  209,  210,  211,  212,
      213,  204,  262,  214,  207,  262,  212,  213,  403,  206,
      214,  221,  221,  226,  241,  226,  208,  211,  259,  259,
      209,  210,  241,  241,  251,  212,  213,  403,  251,  214,

      217,  217,  217,  217,  217,  217,  218,  218,  218,  218,
      218,  218,  219,  219,  219,  219,  219,  219,  220,  220,
      820,  228,  220,  220,  220,  220,  220,  220,  228,  822,
      219,  222,  222,  222,  222,  222,  222,  223,  223,  223,
      223,  223,  223,  250,  255,  250,  260,  264,  276,  276,
      260,  264,  301,  282,  255,  282,  320,  320,  307,  255,
      255,  823,  255,  296,  296,  361,  296,  296,  307,  322,
      301,  361,  322,  323,  323,  326,  326,  330,  335,  330,
      296,  340,  378,  397,  378,  361,  335,  374,  340,  361,
      296,  388,  388,  374,  389,  398,  399,  401,  389,  402,

      477,  503,  503,  404,  477,  482,  323,  397,  405,  405,
      405,  405,  405,  405,  388,  440,  482,  509,  509,  398,
      399,  401,  404,  402,  406,  406,  406,  406,  406,  406,
      441,  497,  514,  520,  514,  441,  440,  520,  554,  554,
      582,  441,  567,  595,  596,  597,  598,  662,  624,  497,
      662,  509,  785,  567,  653,  554,  582,  644,  644,  824,
      653,  742,  742,  785,  597,  598,  624,  595,  596,  821,
      825,  826,  827,  828,  830,  831,  821,  832,  833,  834,
      835,  836,  837,  838,  839,  840,  841,  821,  844,  845,
      846,  850,  851,  853,  854,  855,  857,  858,  859,  860,

      861,  862,  863,  864,  865,  866,  867,  868,  869,  870,
      871,  872,  873,  874,  875,  876,  876,  878,  880,  882,
      883,  885,  886,  887,  888,  889,  891,  894,  897,  899,
      900,  902,  903,  904,  905,  867,  906,  907,  908,  909,
      910,  915,  916,  917,  920,  876,  922,  923,  924,  925,
      926,  927,  928,  931,  932,  933,  934,  935,  936,  924,
      937,  938,  939,  940,  942,  943,  944,  945,  939,  946,
      947,  949,  950,  951,  953,  954,  958,  960,  961,  962,
      963,  965,  966,  967,  968,  969,  970,  971,  972,  973,
      975,  976,  977,  978,  979,  980,  982,  983,  985,  986,

      987,  988,  989,  991,  992,  993,  994,  995,  996,  998,
      999, 1000, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1012,
     1013, 1014, 1015, 1016, 1017,  998,  998, 1019, 1022, 1023,
     1024, 1025, 1026, 1027, 1028, 1030, 1032, 1033, 1035, 1036,
     1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048,
     1049, 1051, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064,
     1065, 1066, 1067, 1069, 1072, 1073, 1074, 1075, 1079, 1080,
     1081, 1082, 1083, 1085, 1086, 1087, 1088, 1089, 1091, 1092,
     1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1106, 1107,
     1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1122, 1124,

     1125, 1126, 1128, 1129, 1130, 1131, 1134, 1135, 1136, 1137,
     1138, 1139, 1140, 1141, 1142, 1145, 1146, 1147, 1149, 1152,
     1153, 1154, 1155, 1156, 1158, 1160, 1161, 1163, 1164, 1165,
     1166, 1167, 1168, 1170, 1171, 1175, 1176, 1177, 1178, 1179,
     1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
     1191, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1203,
     1204, 1205, 1206, 1208, 1209, 1211, 1212, 1213, 1216, 1217,
     1218, 1220, 1221, 1222, 1223, 1224, 1228, 1229, 1230, 1232,
     1233, 1234, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1244,
     1245, 1246, 1248, 1249, 1250, 1251, 1254, 1255, 1256, 1257,

     1261, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1266,  810, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1268, 1268,  807,  806, 1268,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1270, 1270,
     1270, 1270, 1270, 1270, 1270,  805, 1270, 1270, 1270, 1271,
      803,  802, 1271,  801, 1271, 1271, 1271, 1272,  799, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1273,  797,
      794, 1273,  793, 1273, 1273, 1273, 1274, 1274, 1274, 1274,

     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1276,  792,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1277,
      790, 1277, 1278, 1278,  789, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1279, 1279, 1279, 1279,  788, 1279, 1279,
     1279, 1279, 1279, 1279, 1280, 1280, 1280, 1280, 1280, 1280,
     1280,  787, 1280, 1280, 1280, 1281, 1281, 1281, 1281, 1281,
     1281, 1281,  786, 1281, 1281, 1281, 1282,  784, 1282, 1283,
      783, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1284,  782, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,

     1284, 1285,  781, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1286,  780, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1287,  778, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287,  776,  775,  774,  773,  772,  771,
      769,  768,  766,  764,  762,  761,  760,  759,  755,  754,
      753,  752,  751,  750,  747,  746,  745,  744,  743,  741,
      739,  738,  737,  736,  735,  734,  733,  731,  730,  729,
      728,  727,  726,  725,  724,  723,  722,  721,  720,  719,
      718,  717,  716,  715,  714,  713,  710,  709,  708,  707,
      706,  705,  704,  703,  702,  701,  696,  694,  693,  692,

      691,  690,  687,  686,  685,  684,  683,  682,  681,  680,
      679,  677,  676,  674,  673,  671,  670,  669,  668,  664,
      663,  661,  660,  659,  656,  654,  652,  651,  648,  647,
      645,  641,  640,  639,  638,  637,  636,  635,  634,  633,
      632,  631,  630,  629,  628,  627,  626,  625,  623,  622,
      621,  619,  617,  616,  615,  614,  613,  612,  611,  610,
      608,  607,  606,  605,  604,  603,  602,  601,  600,  594,
      593,  591,  589,  588,  586,  585,  584,  583,  581,  580,
      579,  578,  577,  576,  575,  574,  572,  570,  569,  568,
      566,  563,  562,  561,  560,  559,  558,  557,  556,  555,

      553,  552,  551,  549,  547,  546,  545,  544,  543,  541,
      540,  539,  538,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  527,  526,  525,  524,  523,  522,  521,  519,
      517,  516,  515,  513,  512,  511,  508,  507,  506,  505,
      504,  502,  501,  500,  499,  495,  493,  492,  489,  488,
      484,  476,  475,  474,  473,  472,  471,  470,  469,  468,
      467,  466,  464,  463,  462,  461,  460,  459,  458,  456,
      455,  453,  450,  449,  448,  447,  446,  445,  444,  443,
      442,  439,  438,  437,  436,  435,  434,  433,  432,  431,
      430,  429,  428,  427,  426,  425,  424,  423,  421,  417,

      416,  415,  414,  412,  411,  410,  396,  395,  393,  392,
      391,  390,  387,  386,  385,  383,  382,  381,  380,  379,
      377,  376,  375,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  360,  359,  358,  357,  356,  355,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,
      343,  342,  341,  339,  338,  337,  336,  334,  333,  332,
      331,  329,  328,  327,  325,  324,  321,  319,  318,  317,
      316,  315,  314,  313,  312,  311,  310,  309,  308,  306,
      305,  304,  303,  302,  300,  299,  298,  297,  295,  294,
      293,  292,  291,  290,  289,  288,  287,  286,  285,  284,

      283,  281,  280,  279,  278,  277,  275,  274,  272,  271,
      270,  269,  267,  266,  265,  263,  261,  258,  257,  256,
      254,  252,  249,  248,  247,  245,  244,  243,  242,  240,
      236,  235,  203,  199,  198,  197,  195,  194,  191,  189,
      184,  182,  181,  179,  178,  175,  174,  172,  170,  169,
      167,  166,  165,  163,  162,  161,  160,  159,  155,  152,
      151,  147,  146,  145,  144,  141,  139,  138,  137,  135,
      134,  132,  131,  130,  128,  126,  125,  124,  123,  119,
      113,  112,  108,  107,  104,  102,   99,   98,   96,   91,
       78,   76,   70,   61,   57,   56,   55,   52,   47,   40,

       37,   27,   25,   22,   19,   17,   13,    9,    8,    7,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "us/1csql/1csql.l"
#define INITIAL 0
/* Companion source code for "flex & bison", published by O'Reilly
 * Media, ISBN 978-0-596-15597-1
 * Copyright (c) 2009, Taughannock Networks. All rights reserved.
 * See the README file for license conditions and contact info.
 * $Header: /home/johnl/flnb/code/sql/RCS/pmysql.l,v 2.1 2009/11/08 02:53:39 johnl Exp $
 */
/*
 * Scanner for mysql subset
 */
#line 14 "us/1csql/1csql.l"
#include "1csql.tab.h"
#include "1csql.h"
#include "CAst.h"
#include <stdarg.h>
#include <string.h>
#include <stdio.h>
#include <vector>

void yyerror(char *s, ...);

std::vector<int> oldstate;

#define COMMENT 1
#define DOT_NAME 2

#define BTWMODE 3

#line 1384 "us\\1csql\\1csql.lex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 31 "us/1csql/1csql.l"


  /* keywords */

#line 1540 "us\\1csql\\1csql.lex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1264 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1711 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 35 "us/1csql/1csql.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 36 "us/1csql/1csql.l"
{ return ALL; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 37 "us/1csql/1csql.l"
{ return ALTER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 38 "us/1csql/1csql.l"
{ return ANALYZE; }
	YY_BREAK
/* Hack for BETWEEN ... AND ... 
   * return special AND token if BETWEEN seen
   */
case 5:
YY_RULE_SETUP
#line 43 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); return AND; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 44 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return ANDOP; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 45 "us/1csql/1csql.l"
{ return ANY; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 46 "us/1csql/1csql.l"
{ return AS; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 47 "us/1csql/1csql.l"
{ return ASC; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 48 "us/1csql/1csql.l"
{ return AUTO_INCREMENT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 49 "us/1csql/1csql.l"
{ return BEFORE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 50 "us/1csql/1csql.l"
{ oldstate.push_back(YY_START); BEGIN BTWMODE; return BETWEEN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 51 "us/1csql/1csql.l"
{ return BIGINT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 52 "us/1csql/1csql.l"
{ return BINARY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 53 "us/1csql/1csql.l"
{ return BIT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 54 "us/1csql/1csql.l"
{ return BLOB; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 55 "us/1csql/1csql.l"
{ return BOTH; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 56 "us/1csql/1csql.l"
{ return BY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 57 "us/1csql/1csql.l"
{ return CALL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 58 "us/1csql/1csql.l"
{ return CASCADE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 59 "us/1csql/1csql.l"
{ return CASE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 60 "us/1csql/1csql.l"
{ return CHANGE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 61 "us/1csql/1csql.l"
{ return CHAR; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 62 "us/1csql/1csql.l"
{ return CHECK; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 63 "us/1csql/1csql.l"
{ return COLLATE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 64 "us/1csql/1csql.l"
{ return COLUMN; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 65 "us/1csql/1csql.l"
{ return COMMENT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 66 "us/1csql/1csql.l"
{ return CONDITION; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 67 "us/1csql/1csql.l"
{ return CONNECT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 68 "us/1csql/1csql.l"
{ return CONSTRAINT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 69 "us/1csql/1csql.l"
{ return CONTINUE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 70 "us/1csql/1csql.l"
{ return CONVERT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 71 "us/1csql/1csql.l"
{ return CREATE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 72 "us/1csql/1csql.l"
{ return CROSS; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 73 "us/1csql/1csql.l"
{ return CURRENT_DATE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 74 "us/1csql/1csql.l"
{ return CURRENT_TIME; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 75 "us/1csql/1csql.l"
{ return CURRENT_TIMESTAMP; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 76 "us/1csql/1csql.l"
{ return CURRENT_USER; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 77 "us/1csql/1csql.l"
{ return CURRENT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 78 "us/1csql/1csql.l"
{ return CURSOR; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 79 "us/1csql/1csql.l"
{ return DATABASE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 80 "us/1csql/1csql.l"
{ return DATABASES; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 81 "us/1csql/1csql.l"
{ return DATE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 82 "us/1csql/1csql.l"
{ return DATETIME; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 83 "us/1csql/1csql.l"
{ return DAY; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 84 "us/1csql/1csql.l"
{ return DAY_HOUR; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 85 "us/1csql/1csql.l"
{ return DAY_MICROSECOND; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 86 "us/1csql/1csql.l"
{ return DAY_MINUTE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 87 "us/1csql/1csql.l"
{ return DAY_SECOND; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 88 "us/1csql/1csql.l"
{ return DECIMAL; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 89 "us/1csql/1csql.l"
{ return DECLARE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 90 "us/1csql/1csql.l"
{ return DEFAULT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 91 "us/1csql/1csql.l"
{ return DELAYED; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 92 "us/1csql/1csql.l"
{ return DELETE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 93 "us/1csql/1csql.l"
{ return DESC; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 94 "us/1csql/1csql.l"
{ return DESCRIBE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 95 "us/1csql/1csql.l"
{ return DETERMINISTIC; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 96 "us/1csql/1csql.l"
{ return DISTINCT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 97 "us/1csql/1csql.l"
{ return DISTINCTROW; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 98 "us/1csql/1csql.l"
{ return DIV; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 99 "us/1csql/1csql.l"
{ return DOUBLE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 100 "us/1csql/1csql.l"
{ return DROP; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 101 "us/1csql/1csql.l"
{ return EACH; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 102 "us/1csql/1csql.l"
{ return ELSE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 103 "us/1csql/1csql.l"
{ return ELSEIF; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 104 "us/1csql/1csql.l"
{ return END; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 105 "us/1csql/1csql.l"
{ return ENUM; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 106 "us/1csql/1csql.l"
{ return ESCAPED; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 107 "us/1csql/1csql.l"
{ yylval.subtok = 0; return EXISTS; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 108 "us/1csql/1csql.l"
{ yylval.subtok = 1; return EXISTS; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 109 "us/1csql/1csql.l"
{ return EXIT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 110 "us/1csql/1csql.l"
{ return EXPLAIN; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 111 "us/1csql/1csql.l"
{ return FETCH; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 112 "us/1csql/1csql.l"
{ return FLOAT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 113 "us/1csql/1csql.l"
{ return FOLLOWING; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 114 "us/1csql/1csql.l"
{ return FOR; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 115 "us/1csql/1csql.l"
{ return FORCE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 116 "us/1csql/1csql.l"
{ return FOREIGN; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 117 "us/1csql/1csql.l"
{ return FROM; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 118 "us/1csql/1csql.l"
{ return FULLTEXT; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 119 "us/1csql/1csql.l"
{ return GRANT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 120 "us/1csql/1csql.l"
{ return GROUP; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 121 "us/1csql/1csql.l"
{ return HAVING; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 122 "us/1csql/1csql.l"
{ return HIGH_PRIORITY; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 123 "us/1csql/1csql.l"
{ return HOUR; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 124 "us/1csql/1csql.l"
{ return HOUR_MICROSECOND; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 125 "us/1csql/1csql.l"
{ return HOUR_MINUTE; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 126 "us/1csql/1csql.l"
{ return HOUR_SECOND; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 127 "us/1csql/1csql.l"
{ return IF; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 128 "us/1csql/1csql.l"
{ return IGNORE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 129 "us/1csql/1csql.l"
{ return IN; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 130 "us/1csql/1csql.l"
{ return INFILE; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 131 "us/1csql/1csql.l"
{ return INNER; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 132 "us/1csql/1csql.l"
{ return INOUT; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 133 "us/1csql/1csql.l"
{ return INSENSITIVE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 134 "us/1csql/1csql.l"
{ return INSERT; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 135 "us/1csql/1csql.l"
{ return INTEGER; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 136 "us/1csql/1csql.l"
{ return INTERVAL; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 137 "us/1csql/1csql.l"
{ return INTO; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 138 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return UNION; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 139 "us/1csql/1csql.l"
{ return IS; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 140 "us/1csql/1csql.l"
{ return ITERATE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 141 "us/1csql/1csql.l"
{ return JOIN; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 142 "us/1csql/1csql.l"
{ return KEY; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 143 "us/1csql/1csql.l"
{ return KEYS; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 144 "us/1csql/1csql.l"
{ return KILL; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 145 "us/1csql/1csql.l"
{ return LEADING; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 146 "us/1csql/1csql.l"
{ return LEAVE; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 147 "us/1csql/1csql.l"
{ return LEFT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 148 "us/1csql/1csql.l"
{ return LIKE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 149 "us/1csql/1csql.l"
{ return LIMIT; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 150 "us/1csql/1csql.l"
{ return LINES; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 151 "us/1csql/1csql.l"
{ return LOAD; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 152 "us/1csql/1csql.l"
{ return LOCALTIME; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 153 "us/1csql/1csql.l"
{ return LOCALTIMESTAMP; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 154 "us/1csql/1csql.l"
{ return LOCK; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 155 "us/1csql/1csql.l"
{ return LONG; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 156 "us/1csql/1csql.l"
{ return LONGBLOB; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 157 "us/1csql/1csql.l"
{ return LONGTEXT; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 158 "us/1csql/1csql.l"
{ return LOOP; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 159 "us/1csql/1csql.l"
{ return LOW_PRIORITY; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 160 "us/1csql/1csql.l"
{ return MATCH; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 161 "us/1csql/1csql.l"
{ return MEDIUMBLOB; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 162 "us/1csql/1csql.l"
{ return MEDIUMINT; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 163 "us/1csql/1csql.l"
{ return MEDIUMTEXT; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 164 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return UNION; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 165 "us/1csql/1csql.l"
{ return MINUTE_MICROSECOND; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 166 "us/1csql/1csql.l"
{ return MINUTE; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 167 "us/1csql/1csql.l"
{ return MINUTE_SECOND; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 168 "us/1csql/1csql.l"
{ return MOD; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 169 "us/1csql/1csql.l"
{ return MODIFIES; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 170 "us/1csql/1csql.l"
{ return MONTH; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 171 "us/1csql/1csql.l"
{ return NATURAL; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 172 "us/1csql/1csql.l"
{ return NONCYCLE; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 173 "us/1csql/1csql.l"
{ return NOT; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 174 "us/1csql/1csql.l"
{ return NO_WRITE_TO_BINLOG; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 175 "us/1csql/1csql.l"
{ return NULLX; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 176 "us/1csql/1csql.l"
{ return NUMBER; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 177 "us/1csql/1csql.l"
{ return ON; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 178 "us/1csql/1csql.l"
{ return ONDUPLICATE; } /* hack due to limited lookahead */
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 179 "us/1csql/1csql.l"
{ return OPTIMIZE; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 180 "us/1csql/1csql.l"
{ return OPTION; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 181 "us/1csql/1csql.l"
{ return OPTIONALLY; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 182 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return OR; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 183 "us/1csql/1csql.l"
{ return ORDER; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 184 "us/1csql/1csql.l"
{ return OVER; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 185 "us/1csql/1csql.l"
{ return OUT; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 186 "us/1csql/1csql.l"
{ return OUTER; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 187 "us/1csql/1csql.l"
{ return OUTFILE; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 188 "us/1csql/1csql.l"
{ return PARTITION; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 189 "us/1csql/1csql.l"
{ return PRECEDING; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 190 "us/1csql/1csql.l"
{ return PRECISION; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 191 "us/1csql/1csql.l"
{ return PRIMARY; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 192 "us/1csql/1csql.l"
{ return PRIOR; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 193 "us/1csql/1csql.l"
{ return PROCEDURE; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 194 "us/1csql/1csql.l"
{ return PURGE; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 195 "us/1csql/1csql.l"
{ return QUICK; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 196 "us/1csql/1csql.l"
{ return RANGE; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 197 "us/1csql/1csql.l"
{ return READ; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 198 "us/1csql/1csql.l"
{ return READS; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 199 "us/1csql/1csql.l"
{ return REAL; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 200 "us/1csql/1csql.l"
{ return REFERENCES; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 201 "us/1csql/1csql.l"
{ return REGEXP; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 202 "us/1csql/1csql.l"
{ return RELEASE; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 203 "us/1csql/1csql.l"
{ return RENAME; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 204 "us/1csql/1csql.l"
{ return REPEAT; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 205 "us/1csql/1csql.l"
{ return REPLACE; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 206 "us/1csql/1csql.l"
{ return REQUIRE; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 207 "us/1csql/1csql.l"
{ return RESTRICT; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 208 "us/1csql/1csql.l"
{ return RETURN; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 209 "us/1csql/1csql.l"
{ return REVOKE; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 210 "us/1csql/1csql.l"
{ return RIGHT; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 211 "us/1csql/1csql.l"
{ return ROLLUP; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 212 "us/1csql/1csql.l"
{ return ROWS; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 213 "us/1csql/1csql.l"
{ return ROW; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 214 "us/1csql/1csql.l"
{ return SCHEMA; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 215 "us/1csql/1csql.l"
{ return SCHEMAS; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 216 "us/1csql/1csql.l"
{ return SECOND; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 217 "us/1csql/1csql.l"
{ return SECOND_MICROSECOND; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 218 "us/1csql/1csql.l"
{ return SELECT; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 219 "us/1csql/1csql.l"
{ return SENSITIVE; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 220 "us/1csql/1csql.l"
{ return SEPARATOR; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 221 "us/1csql/1csql.l"
{ return SET; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 222 "us/1csql/1csql.l"
{ return SHOW; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 223 "us/1csql/1csql.l"
{ return SMALLINT; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 224 "us/1csql/1csql.l"
{ return SOME; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 225 "us/1csql/1csql.l"
{ return SONAME; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 226 "us/1csql/1csql.l"
{ return SPATIAL; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 227 "us/1csql/1csql.l"
{ return SPECIFIC; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 228 "us/1csql/1csql.l"
{ return SQL; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 229 "us/1csql/1csql.l"
{ return SQLEXCEPTION; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 230 "us/1csql/1csql.l"
{ return SQLSTATE; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 231 "us/1csql/1csql.l"
{ return SQLWARNING; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 232 "us/1csql/1csql.l"
{ return SQL_BIG_RESULT; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 233 "us/1csql/1csql.l"
{ return SQL_CALC_FOUND_ROWS; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 234 "us/1csql/1csql.l"
{ return SQL_SMALL_RESULT; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 235 "us/1csql/1csql.l"
{ return SSL; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 236 "us/1csql/1csql.l"
{ return START; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 237 "us/1csql/1csql.l"
{ return STARTING; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 238 "us/1csql/1csql.l"
{ return STRAIGHT_JOIN; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 239 "us/1csql/1csql.l"
{ return TABLE; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 240 "us/1csql/1csql.l"
{ return TEMPORARY; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 241 "us/1csql/1csql.l"
{ return TERMINATED; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 242 "us/1csql/1csql.l"
{ return TEXT; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 243 "us/1csql/1csql.l"
{ return THEN; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 244 "us/1csql/1csql.l"
{ return TIME; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 245 "us/1csql/1csql.l"
{ return TIMESTAMP; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 246 "us/1csql/1csql.l"
{ return TINYINT; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 247 "us/1csql/1csql.l"
{ return TINYTEXT; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 248 "us/1csql/1csql.l"
{ return TO; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 249 "us/1csql/1csql.l"
{ return TRAILING; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 250 "us/1csql/1csql.l"
{ return TRIGGER; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 251 "us/1csql/1csql.l"
{ return UNDO; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 252 "us/1csql/1csql.l"
{ return UNBOUNDED; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 253 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return UNION; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 254 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return UNION; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 255 "us/1csql/1csql.l"
{ return UNIQUE; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 256 "us/1csql/1csql.l"
{ return UNLOCK; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 257 "us/1csql/1csql.l"
{ return UNSIGNED; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 258 "us/1csql/1csql.l"
{ return UPDATE; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 259 "us/1csql/1csql.l"
{ return USAGE; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 260 "us/1csql/1csql.l"
{ return USE; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 261 "us/1csql/1csql.l"
{ return USING; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 262 "us/1csql/1csql.l"
{ return UTC_DATE; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 263 "us/1csql/1csql.l"
{ return UTC_TIME; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 264 "us/1csql/1csql.l"
{ return UTC_TIMESTAMP; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 265 "us/1csql/1csql.l"
{ return VALUES; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 266 "us/1csql/1csql.l"
{ return VARBINARY; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 267 "us/1csql/1csql.l"
{ return VARCHAR; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 268 "us/1csql/1csql.l"
{ return VARYING; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 269 "us/1csql/1csql.l"
{ return WHEN; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 270 "us/1csql/1csql.l"
{ return WHERE; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 271 "us/1csql/1csql.l"
{ return WHILE; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 272 "us/1csql/1csql.l"
{ return WITH; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 273 "us/1csql/1csql.l"
{ return WRITE; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 274 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return XOR; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 275 "us/1csql/1csql.l"
{ return YEAR; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 276 "us/1csql/1csql.l"
{ return YEAR_MONTH; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 277 "us/1csql/1csql.l"
{ return ZEROFILL; }
	YY_BREAK
/* numbers */
case 240:
YY_RULE_SETUP
#line 281 "us/1csql/1csql.l"
{ yylval.intval = atoi(yytext); return INTNUM; } 
	YY_BREAK
case 241:
#line 284 "us/1csql/1csql.l"
case 242:
#line 285 "us/1csql/1csql.l"
case 243:
#line 286 "us/1csql/1csql.l"
case 244:
#line 287 "us/1csql/1csql.l"
case 245:
YY_RULE_SETUP
#line 287 "us/1csql/1csql.l"
{ yylval.floatval = atof(yytext) ;
                                  return APPROXNUM; }
	YY_BREAK
/* booleans */
case 246:
YY_RULE_SETUP
#line 290 "us/1csql/1csql.l"
{ yylval.boolval = true; return BOOL; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 291 "us/1csql/1csql.l"
{ yylval.boolval = false; return BOOL; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 292 "us/1csql/1csql.l"
{ yylval.boolval = false; return BOOL; }
	YY_BREAK
/* strings */
case 249:
YY_RULE_SETUP
#line 296 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 297 "us/1csql/1csql.l"
{ yylval.qpsz = newQuot_psz(true); yylval.qpsz->psz = (char*)malloc(strlen(yytext)-1); memset(yylval.qpsz->psz, '\0', strlen(yytext)-1); strncpy(yylval.qpsz->psz, yytext+1, strlen(yytext)-2); return NAME; }
	YY_BREAK
case 251:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 299 "us/1csql/1csql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
case 252:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 300 "us/1csql/1csql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
/* hex strings */
case 253:
#line 304 "us/1csql/1csql.l"
case 254:
YY_RULE_SETUP
#line 304 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
/* bit strings */
case 255:
#line 309 "us/1csql/1csql.l"
case 256:
YY_RULE_SETUP
#line 309 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
/* name followed by the dot */
case 257:
YY_RULE_SETUP
#line 312 "us/1csql/1csql.l"
{ oldstate.push_back(YY_START); BEGIN DOT_NAME; return yytext[0]; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 313 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); yylval.qpsz = newQuot_psz(yytext, false); return NAME; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 314 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); yylval.qpsz = newQuot_psz(true); yylval.qpsz->psz = (char*)malloc(strlen(yytext)-1); memset(yylval.qpsz->psz, '\0', strlen(yytext)-1); strncpy(yylval.qpsz->psz, yytext+1, strlen(yytext)-2); return NAME; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 315 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); yylval.qpsz = newQuot_psz(yytext, false); return NAME; }
	YY_BREAK
/* operators */
case 261:
YY_RULE_SETUP
#line 318 "us/1csql/1csql.l"
{ return yytext[0]; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 320 "us/1csql/1csql.l"
{ return ANDOP; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 321 "us/1csql/1csql.l"
{ return CONCAT; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 323 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 324 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 325 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 326 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 327 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 328 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 270:
#line 330 "us/1csql/1csql.l"
case 271:
YY_RULE_SETUP
#line 330 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 331 "us/1csql/1csql.l"
{ return PARASSIGN; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 333 "us/1csql/1csql.l"
{ return OUTPLUS; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 335 "us/1csql/1csql.l"
{ yylval.subtok = 1; return SHIFT; }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 336 "us/1csql/1csql.l"
{ yylval.subtok = 2; return SHIFT; }
	YY_BREAK
/* functions */
case 276:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 340 "us/1csql/1csql.l"
{ return FSUBSTRING; }
	YY_BREAK
case 277:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 341 "us/1csql/1csql.l"
{ return FTRIM; }
	YY_BREAK
case 278:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 342 "us/1csql/1csql.l"
{ return FDATE_ADD; }
	YY_BREAK
case 279:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 343 "us/1csql/1csql.l"
{ return FDATE_SUB; }
	YY_BREAK
/* 
         * peek ahead and return function if name(
         */
case 280:
YY_RULE_SETUP
#line 348 "us/1csql/1csql.l"
{ int c = yyinput(); unput(c);
           if(c == '(') return FCOUNT;
           yylval.qpsz = newQuot_psz(yytext, false);
           return NAME; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 353 "us/1csql/1csql.l"
{ yylval.qpsz = newQuot_psz(yytext, false);
                          return NAME; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 355 "us/1csql/1csql.l"
{ yylval.qpsz = newQuot_psz(yytext+1, false);
						  yylval.qpsz->psz[yyleng-2] = 0;
                          return NAME; }
	YY_BREAK
case 283:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 359 "us/1csql/1csql.l"
{ yyerror("unterminated quoted name %s", yytext); }
	YY_BREAK
/* user variables */
case 284:
#line 363 "us/1csql/1csql.l"
case 285:
#line 364 "us/1csql/1csql.l"
case 286:
#line 365 "us/1csql/1csql.l"
case 287:
YY_RULE_SETUP
#line 365 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext+1); return USERVAR; }
	YY_BREAK
case 288:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 367 "us/1csql/1csql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 289:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 368 "us/1csql/1csql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 290:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 369 "us/1csql/1csql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 372 "us/1csql/1csql.l"
{ return ASSIGN; }
	YY_BREAK
/* comments */   
case 292:
YY_RULE_SETUP
#line 375 "us/1csql/1csql.l"
;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 376 "us/1csql/1csql.l"
;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 378 "us/1csql/1csql.l"
{ oldstate.push_back(YY_START); BEGIN COMMENT; }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 379 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 380 "us/1csql/1csql.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 381 "us/1csql/1csql.l"
{ yyerror("unclosed comment"); }
	YY_BREAK
/* everything else */
case 297:
YY_RULE_SETUP
#line 384 "us/1csql/1csql.l"
/* white space */
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 385 "us/1csql/1csql.l"
{ yyerror("mystery character '%c'", *yytext); }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 387 "us/1csql/1csql.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3154 "us\\1csql\\1csql.lex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(DOT_NAME):
			case YY_STATE_EOF(BTWMODE):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1264 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1264 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1263);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 387 "us/1csql/1csql.l"


