#line 2 "us\\1csql\\1csql.lex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <io.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 299
#define YY_END_OF_BUFFER 300
static yyconst short int yy_acclist[1544] =
    {   0,
      300,  298,  299,  297,  298,  299,  297,  299,  261,  298,
      299,  298,  299,  292,  298,  299,  261,  298,  299,  261,
      298,  299,  298,  299,  261,  298,  299,  261,  298,  299,
      257,  261,  298,  299,  261,  298,  299,  240,  298,  299,
      240,  298,  299,  298,  299,  269,  298,  299,  264,  298,
      299,  267,  298,  299,  298,  299,  298,  299,  281,  298,
      299,  281,  298,  299,  281,  298,  299,  281,  298,  299,
      281,  298,  299,  281,  298,  299,  281,  298,  299,  281,
      298,  299,  281,  298,  299,  281,  298,  299,  281,  298,
      299,  281,  298,  299,  281,  298,  299,  281,  298,  299,

      281,  298,  299,  281,  298,  299,  281,  298,  299,  281,
      298,  299,  281,  298,  299,  281,  298,  299,  281,  298,
      299,  281,  298,  299,  281,  298,  299,  281,  298,  299,
      281,  298,  299,  281,  298,  299,  261,  298,  299,  296,
      298,  299,  296,  299,  296,  298,  299,  299,  298,  299,
      260,  298,  299,  258,  298,  299,  281,  298,  299,  270,
      252,  250,  292,  262,  251,  249,  293,  240,  242,  294,
      241,  291,  274,  268,  271,  272,  266,  275,  284,  283,
      281,  281,  281,  281,    8,  281,  281,  281,  281,  281,
      281,   18,  281,  281,  281,  281,  281,  281,  281,  281,

      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,   89,  281,
      281,   91,  281,  101,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  139,
      281,  281,  144,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  210,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  263,  295,  259,  258,  281,  250,  249,
      273,  293,  245,  241,  255,  243,  254,  265,  288,  290,

      289,  282,    1,  281,    2,  281,  281,  281,    6,  281,
        7,  281,    9,  281,  281,  281,  281,  281,  281,   15,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,   45,  281,   50,  281,  281,
      281,  281,  281,  281,   60,  281,  281,  281,  281,  281,
       66,  281,  281,  281,  281,  281,  281,  281,  281,  281,
       76,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,   97,  281,  281,  281,  104,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  130,  281,  281,  281,

      281,  281,  135,  281,  281,  281,  281,  281,  147,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  175,  281,  281,  281,  281,  281,  281,  183,  281,
      281,  281,  281,  281,  281,  281,  190,  281,  197,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  222,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  236,  281,  281,  281,  259,    5,    6,  281,  250,
      249,  244,  285,  287,  286,  281,  281,  281,  256,  281,

      281,  281,  281,   16,  281,   17,  281,   19,  281,  281,
       21,  281,  281,   23,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
       43,  281,  281,  281,  281,  281,  281,  281,   55,  281,
      281,  281,  281,   62,  281,   63,  281,   64,  281,   67,
      281,  281,  281,   71,  281,  281,  281,  281,  281,  281,
      281,  281,   79,  281,  281,  281,  281,  281,  281,   85,
      281,  281,  281,  281,  281,  281,  281,  208,  281,  185,
      281,   97,  281,   13,  281,  281,   99,  281,  281,  103,
      281,  105,  281,  106,  281,  281,  281,  109,  281,  110,

      281,  281,  281,  113,  281,  281,  116,  281,  117,  281,
      120,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  137,  281,  281,  281,  281,  281,  281,  281,
      146,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      159,  281,  161,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  174,  281,  281,
      281,  281,  281,  281,  184,  281,  281,  186,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  204,  281,  205,  281,  206,  281,  281,  281,
      281,  281,  246,  281,  281,  213,  281,  281,  281,  281,

      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      231,  281,  281,  281,  234,  281,  281,  253,  237,  281,
      281,    3,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,   24,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  280,  281,  281,   34,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  248,  281,
       73,  281,   74,  281,  281,   77,  281,  281,  281,   81,
      281,   82,  281,  281,  281,  281,  281,  104,  281,  281,
       93,  281,   94,  281,  281,  281,  281,  281,  281,  281,

      108,  281,  111,  281,  112,  281,  281,  281,  281,  281,
      122,  281,  281,  281,  126,  281,  281,  281,  132,  281,
      281,  281,  281,  281,  281,  281,  281,  145,  281,  148,
      281,  281,  281,  281,  281,  281,  154,  281,  281,  156,
      281,  157,  281,  158,  281,  160,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  172,  281,  163,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  198,  281,  281,
      281,  201,  281,  281,  281,  281,  281,  281,  281,  281,
      277,  281,  215,  281,  281,  281,  281,  281,  281,  221,

      281,  223,  281,  281,  281,  227,  281,  281,  281,  281,
      232,  281,  233,  281,  235,  281,  281,  281,  281,  281,
       11,  281,  281,   14,  281,  281,   22,  281,  281,  281,
       26,  281,  281,  281,  281,  281,  281,  281,   33,  281,
      281,   40,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,   54,  281,  281,  281,  281,   61,
      281,   65,  281,  281,   69,  281,  281,   74,  281,  281,
      281,  281,   83,  281,  281,  281,  281,   90,  281,   92,
      281,  281,   96,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  128,  281,  281,  281,  281,

      281,  138,  281,  281,  281,  142,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  165,  281,  166,  281,  281,
      281,  281,  170,  281,  171,  281,  173,  281,  176,  281,
      178,  281,  180,  281,  281,  281,  281,  187,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  217,  281,
      281,  218,  281,  281,  220,  281,  281,  281,  227,  281,
      281,  281,  281,  281,  281,    4,  281,  281,   12,  281,
       20,  281,  281,   25,  281,   27,  281,  281,   29,  281,
      281,  281,   32,  281,   39,  281,  281,  281,  281,  281,

      281,  281,  281,  281,   50,  281,   51,  281,   52,  281,
       53,  281,  281,  281,  281,   68,  281,   72,  281,  281,
       78,  281,  281,  281,  281,  281,  281,  281,  281,  102,
      281,  107,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  133,  281,  281,  281,  281,  281,  149,
      281,  281,  281,  281,  153,  281,  281,  281,  164,  281,
      167,  281,  168,  281,  281,  177,  281,  281,  281,  281,
      281,  188,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  276,  281,  281,  281,  281,  281,  281,  212,
      281,  281,  247,  281,  281,  281,  281,  281,  229,  281,

      230,  281,  281,  281,  281,  281,  281,  281,   31,  281,
      281,   41,  281,  281,  281,   44,  281,   46,  281,  281,
      281,  281,   56,  281,  281,   58,  281,  281,   80,  281,
      281,  281,  281,  281,  281,  281,   98,  281,  281,  118,
      281,  119,  281,  281,  281,  281,  281,  281,  281,  281,
      131,  281,  281,  134,  281,  141,  281,  281,  281,  281,
      281,  281,  281,  169,  281,  281,  281,  281,  189,  281,
      281,  281,  281,  281,  192,  281,  281,  199,  281,  281,
      281,  281,  281,  281,  209,  281,  211,  281,  281,  219,
      281,  224,  281,  225,  281,  281,  281,  281,  239,  281,

      281,   23,  281,   28,  281,  281,  281,  281,  281,   42,
      281,  278,  279,  281,  281,  281,  281,  281,   75,  281,
      281,  281,  281,  281,  281,  100,  281,  114,  281,  281,
      281,  124,  281,  281,  281,  281,  281,  281,  150,  281,
      151,  281,  152,  281,  155,  281,  281,  281,  181,  281,
      182,  281,  281,  281,  281,  281,  281,  281,  281,  202,
      281,  281,  207,  281,  214,  281,  216,  281,  228,  281,
      281,  281,  281,   30,  281,  281,  281,  281,  281,   48,
      281,   49,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  123,  281,  125,  281,  281,  281,  281,   70,

      143,  281,  162,  281,  281,  281,  281,  281,  281,  193,
      281,  281,  203,  281,  281,  281,  238,  281,  281,  281,
      281,  281,  281,  281,   59,  281,  281,  281,   87,  281,
       88,  281,   95,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,   35,  281,
       36,  281,   38,  281,  281,  281,  281,  281,  281,  121,
      281,  281,  281,  281,  140,  281,  281,  281,  281,  191,
      281,  281,  281,  229,  281,  281,  281,  281,   57,  281,
       84,  281,  281,  281,  281,  129,  281,  281,  281,  281,
      281,  281,  200,  281,  226,  281,   10,  281,  281,  281,

      281,  115,  281,  281,  281,  281,  194,  281,  281,  281,
      281,   47,  281,  281,  281,  281,  281,  281,  281,  281,
       86,  281,  281,  281,  281,  281,  196,  281,   37,  281,
      281,  281,  281,  281,  127,  281,  136,  281,  179,  281,
      281,  195,  281
    } ;

static yyconst short int yy_accept[1264] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   12,   14,   17,   20,   23,   25,   28,
       31,   35,   38,   41,   44,   46,   49,   52,   55,   57,
       59,   62,   65,   68,   71,   74,   77,   80,   83,   86,
       89,   92,   95,   98,  101,  104,  107,  110,  113,  116,
      119,  122,  125,  128,  131,  134,  137,  140,  143,  145,
      148,  149,  151,  154,  157,  160,  161,  161,  162,  163,
      163,  164,  165,  165,  166,  167,  167,  167,  168,  168,
      169,  170,  170,  171,  172,  172,  172,  172,  173,  174,
      175,  176,  177,  178,  179,  179,  180,  180,  180,  180,

      181,  181,  182,  183,  184,  185,  187,  188,  188,  189,
      190,  191,  192,  194,  195,  196,  197,  198,  199,  200,
      201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
      211,  212,  213,  214,  215,  216,  217,  218,  219,  221,
      222,  224,  226,  227,  228,  229,  230,  231,  232,  233,
      234,  235,  236,  237,  238,  239,  240,  242,  243,  245,
      246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
      256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
      266,  267,  268,  269,  270,  272,  273,  274,  275,  276,
      277,  278,  279,  280,  281,  281,  282,  283,  284,  285,

      286,  286,  287,  287,  288,  289,  289,  289,  290,  290,
      290,  290,  291,  291,  292,  293,  293,  294,  295,  295,
      296,  296,  297,  298,  299,  299,  300,  300,  301,  301,
      302,  303,  305,  307,  308,  309,  311,  313,  315,  316,
      316,  317,  318,  319,  320,  322,  323,  324,  325,  326,
      327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
      338,  340,  341,  342,  343,  344,  345,  347,  348,  349,
      350,  351,  353,  354,  355,  356,  357,  358,  359,  360,
      361,  363,  364,  365,  366,  367,  368,  369,  370,  371,
      372,  373,  374,  375,  376,  378,  379,  380,  382,  383,

      384,  385,  386,  387,  388,  389,  390,  391,  392,  393,
      394,  395,  396,  397,  399,  400,  401,  402,  403,  405,
      406,  407,  407,  408,  409,  411,  412,  413,  414,  415,
      416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
      426,  427,  428,  429,  430,  431,  432,  434,  435,  436,
      437,  438,  439,  441,  442,  443,  444,  445,  446,  447,
      449,  451,  452,  453,  454,  455,  456,  457,  458,  459,
      460,  461,  462,  463,  464,  465,  466,  467,  468,  469,
      470,  471,  472,  474,  475,  476,  477,  478,  479,  480,
      481,  482,  482,  484,  485,  486,  486,  487,  487,  490,

      490,  491,  491,  492,  492,  493,  494,  495,  496,  497,
      498,  499,  500,  501,  502,  503,  504,  506,  508,  510,
      511,  513,  514,  516,  517,  518,  519,  520,  521,  522,
      523,  524,  525,  526,  527,  528,  529,  530,  531,  533,
      534,  535,  536,  537,  538,  539,  541,  542,  543,  544,
      546,  548,  550,  552,  553,  554,  556,  557,  558,  559,
      560,  561,  562,  563,  565,  566,  567,  568,  569,  570,
      572,  573,  574,  575,  576,  577,  578,  580,  582,  584,
      586,  587,  589,  590,  592,  594,  596,  597,  598,  600,
      602,  603,  604,  606,  607,  609,  611,  613,  614,  615,

      616,  617,  618,  619,  620,  621,  622,  623,  623,  625,
      626,  627,  627,  628,  629,  630,  631,  633,  634,  635,
      636,  637,  638,  639,  640,  641,  643,  645,  646,  647,
      648,  649,  650,  651,  652,  653,  654,  655,  656,  657,
      658,  660,  661,  662,  663,  664,  665,  667,  668,  670,
      671,  672,  673,  674,  675,  676,  677,  678,  679,  680,
      681,  682,  683,  685,  687,  689,  690,  691,  692,  693,
      695,  696,  698,  699,  700,  701,  702,  703,  704,  705,
      706,  707,  708,  709,  710,  711,  713,  714,  715,  717,
      718,  719,  721,  722,  722,  722,  722,  722,  724,  725,

      726,  727,  728,  729,  730,  731,  732,  733,  735,  736,
      737,  738,  739,  740,  741,  742,  743,  745,  746,  748,
      749,  750,  751,  752,  753,  754,  755,  756,  757,  758,
      759,  760,  761,  762,  763,  764,  765,  766,  767,  768,
      769,  771,  773,  775,  776,  778,  779,  780,  782,  784,
      785,  786,  787,  788,  790,  791,  793,  795,  796,  797,
      798,  799,  800,  801,  803,  805,  807,  808,  809,  810,
      811,  813,  814,  815,  817,  818,  819,  821,  822,  823,
      824,  824,  825,  826,  826,  827,  828,  830,  832,  833,
      834,  835,  836,  837,  839,  840,  842,  844,  846,  848,

      849,  850,  851,  852,  853,  854,  855,  856,  857,  858,
      860,  862,  863,  864,  865,  866,  867,  868,  869,  870,
      871,  872,  873,  874,  875,  876,  877,  878,  880,  881,
      882,  884,  885,  886,  887,  888,  889,  890,  891,  892,
      893,  895,  896,  897,  898,  899,  900,  902,  904,  905,
      906,  908,  909,  910,  911,  913,  915,  917,  918,  919,
      920,  921,  923,  924,  926,  927,  929,  930,  931,  933,
      934,  935,  936,  937,  938,  939,  941,  942,  944,  945,
      946,  947,  948,  949,  950,  951,  952,  953,  954,  955,
      957,  958,  959,  960,  962,  964,  965,  967,  968,  970,

      971,  972,  973,  975,  976,  977,  978,  980,  982,  983,
      985,  986,  987,  988,  989,  990,  991,  992,  993,  994,
      995,  996,  998,  999, 1000, 1001, 1002, 1002, 1004, 1005,
     1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
     1016, 1018, 1020, 1021, 1022, 1023, 1025, 1027, 1029, 1031,
     1033, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044,
     1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
     1055, 1056, 1057, 1058, 1059, 1059, 1061, 1062, 1064, 1065,
     1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1078,
     1079, 1081, 1083, 1084, 1086, 1088, 1089, 1091, 1092, 1093,

     1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
     1107, 1109, 1111, 1113, 1114, 1115, 1116, 1118, 1120, 1121,
     1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1134,
     1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
     1146, 1147, 1148, 1148, 1148, 1149, 1150, 1152, 1153, 1154,
     1155, 1157, 1158, 1159, 1161, 1163, 1165, 1166, 1168, 1169,
     1170, 1171, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
     1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
     1192, 1193, 1193, 1195, 1196, 1197, 1198, 1199, 1201, 1203,
     1204, 1205, 1206, 1207, 1208, 1209, 1211, 1212, 1214, 1215,

     1216, 1218, 1220, 1221, 1222, 1223, 1225, 1226, 1228, 1229,
     1231, 1232, 1233, 1234, 1235, 1236, 1237, 1239, 1240, 1242,
     1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1254,
     1256, 1256, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
     1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1277,
     1278, 1280, 1281, 1282, 1283, 1284, 1285, 1287, 1289, 1290,
     1290, 1292, 1294, 1296, 1297, 1298, 1299, 1301, 1302, 1304,
     1306, 1307, 1308, 1309, 1310, 1312, 1313, 1314, 1315, 1316,
     1317, 1318, 1319, 1321, 1322, 1323, 1324, 1325, 1326, 1328,
     1330, 1331, 1332, 1334, 1335, 1336, 1337, 1338, 1338, 1338,

     1339, 1341, 1343, 1345, 1347, 1348, 1349, 1351, 1353, 1354,
     1355, 1356, 1357, 1358, 1359, 1360, 1362, 1363, 1365, 1367,
     1368, 1369, 1371, 1372, 1373, 1374, 1376, 1377, 1378, 1379,
     1380, 1382, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
     1392, 1393, 1395, 1397, 1398, 1399, 1400, 1401, 1401, 1403,
     1405, 1406, 1407, 1408, 1409, 1410, 1412, 1413, 1415, 1416,
     1417, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1427, 1428,
     1429, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1440,
     1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1451,
     1453, 1455, 1456, 1457, 1458, 1459, 1460, 1462, 1463, 1464,

     1465, 1466, 1467, 1468, 1469, 1470, 1472, 1473, 1474, 1476,
     1477, 1478, 1479, 1481, 1483, 1484, 1485, 1486, 1488, 1489,
     1490, 1491, 1492, 1493, 1495, 1497, 1499, 1500, 1501, 1502,
     1504, 1505, 1506, 1507, 1509, 1510, 1511, 1512, 1514, 1515,
     1516, 1517, 1518, 1519, 1520, 1521, 1523, 1524, 1525, 1526,
     1527, 1529, 1531, 1532, 1533, 1534, 1535, 1537, 1539, 1541,
     1542, 1544, 1544
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,    8,   15,   16,   17,   18,   19,   20,
       21,   22,   21,   21,   21,   23,   21,   24,    8,   25,
       26,   27,    1,   28,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
        1,   29,    1,    8,   30,   31,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,    1,   58,    1,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[59] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    1,    1,    6,    1,    7,    7,    7,
        7,    7,    7,    1,    1,    1,    1,    1,    1,    4,
        8,    9,    7,    9,    9,    7,    9,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,   10,    4,    4,    1
    } ;

static yyconst short int yy_base[1287] =
    {   0,
        0,    0,   56,   57,   70,    0, 1656, 1655, 1686, 1689,
     1689, 1689, 1659,  126,    0, 1689, 1675,  127, 1669,  120,
      126, 1669,  117,  145, 1655,   36, 1653,   38,  147,  157,
      140,  148,  150,  161,  163,  173, 1630,  171,  183, 1632,
      140,  190,  191,  183,  193,  102, 1625,  207,  220,  212,
      228, 1644,  130,  214, 1639, 1638, 1615, 1689, 1689, 1655,
     1689,  236, 1689,    0,  239, 1689,  252, 1689, 1666,  280,
        0, 1689,  259, 1689, 1660,  277, 1657,    0,  274,  282,
      293,  305, 1689,  312,   48,  322,    0, 1689, 1689, 1641,
     1689, 1689, 1689, 1689, 1664,  341, 1663, 1662,  336, 1689,

     1661,    0, 1628,  256,  315, 1628, 1610,  258,  161,  311,
     1614, 1608,    0,  311,  254,  314,  141, 1609,  266,  326,
      320, 1605, 1610, 1621, 1604,  197, 1619,  328, 1609, 1600,
     1604,  331, 1603, 1605,  168, 1594, 1608, 1593,    0, 1599,
      344,    0, 1607, 1602, 1585, 1597,  346,  340,  354, 1588,
     1603,  352,  356, 1586,  362,  359,  402, 1585, 1600, 1583,
     1597, 1583,  370, 1582, 1590, 1584,  385, 1590, 1587,  355,
     1587,  397, 1579, 1592,  367,  382, 1580, 1579,  289, 1588,
     1587,  371, 1583,  380,    0,  387,  410, 1583,  415, 1583,
      413,  401, 1565, 1575,    0, 1565, 1581, 1563, 1689, 1689,

      429, 1606,  441,    0,  422,  444,  456,  460,  461,  457,
      465,  466,  469, 1689,    0,  481,  487,  493,  503,  462,
      512,  518,    0, 1689,  479, 1689,  517, 1689,  390, 1689,
     1689,    0,    0, 1574, 1566,    0,    0,    0, 1562,  473,
     1561, 1552, 1565, 1572,    0, 1570, 1563, 1558,  508,  448,
     1566,  312, 1555,  508, 1553, 1565, 1546,  438,  513, 1565,
      431, 1562,  514, 1559, 1556, 1540,    0, 1557, 1542, 1549,
     1551,    0, 1542, 1553,  497, 1541, 1533, 1548, 1549, 1537,
      518, 1535, 1535, 1532, 1524, 1535, 1535, 1524, 1526, 1535,
     1530, 1533, 1516, 1531,  543, 1517, 1520, 1514, 1520,  516,

     1511, 1525, 1520, 1523, 1523,  525, 1519, 1509, 1525, 1520,
     1513, 1517, 1499, 1510, 1498, 1496, 1493, 1512,  553, 1502,
      535,  570, 1504, 1507,  538, 1493, 1490, 1506,  532, 1505,
     1500, 1503, 1498,  542, 1499, 1498, 1497, 1500,  544, 1479,
     1479, 1477, 1482, 1488, 1484, 1482, 1474, 1487, 1476, 1485,
     1470, 1487,    0, 1464, 1474, 1480, 1483, 1463, 1479,  534,
        0, 1463, 1479, 1460, 1466, 1461, 1463, 1455, 1460, 1468,
     1447, 1462,  548, 1465, 1454, 1453,  535, 1453, 1451, 1456,
     1463, 1456,    0, 1448, 1462, 1439,  557,  548, 1447, 1450,
     1437, 1477,    0, 1437, 1439,  577,  589,  590,    0,  591,

      593,  467,  592,  589,  605, 1689, 1689, 1689, 1435, 1427,
     1452, 1689, 1432, 1444, 1434, 1429,    0,    0,    0, 1445,
        0, 1438, 1443, 1432, 1441, 1428, 1435, 1430, 1433, 1417,
     1427, 1430, 1414, 1413, 1413, 1426, 1415, 1427,  584,  590,
     1415, 1426, 1405, 1400, 1404, 1405, 1404, 1412, 1408,    0,
        0, 1410,    0, 1402, 1397,    0, 1415, 1410, 1406, 1393,
     1397, 1406, 1401,    0, 1389, 1388, 1391, 1392, 1406, 1405,
     1385, 1378, 1389, 1382, 1379,  554,    0,    0,    0,    0,
      566,    0, 1397,    0,    0,    0, 1388, 1391,    0,    0,
     1375, 1375,    0, 1381,    0,  597,    0, 1376, 1383, 1369,

     1377,  550, 1382, 1379, 1368, 1367, 1359,  614,    0, 1378,
     1364, 1360,  587, 1362, 1361, 1369,    0, 1368,  596, 1375,
     1357, 1369, 1368, 1361, 1366, 1351,    0, 1351, 1344, 1366,
     1353, 1364, 1363, 1354, 1344, 1343, 1349, 1339, 1353, 1336,
        0, 1343, 1341, 1351, 1344, 1334,    0, 1339,    0, 1337,
     1340, 1339,  604, 1323, 1326, 1344, 1324, 1334, 1322, 1336,
     1325, 1330,    0,    0, 1319,  601, 1325, 1329, 1355,    0,
     1313,    0, 1319, 1311, 1316, 1327, 1322, 1308, 1322, 1319,
      604, 1320, 1315, 1315, 1313,    0, 1316, 1315,    0, 1314,
     1689, 1319, 1311,  637,  638,  634,  635,    0, 1290, 1306,

     1309, 1308, 1292, 1286, 1306, 1304, 1305,    0, 1287, 1292,
     1291, 1284, 1300, 1284, 1287, 1282,    0, 1294,    0, 1284,
     1279, 1295,  615, 1286, 1279, 1284, 1287, 1290, 1272, 1277,
     1283, 1282, 1277, 1272, 1270, 1278, 1276, 1276, 1261, 1270,
        0,    0,  634, 1255,    0, 1270, 1271,    0,    0, 1268,
     1258,  609, 1268,    0, 1267,    0,    0, 1252, 1250, 1264,
      596, 1248, 1253,    0,    0,    0, 1246, 1253, 1259, 1245,
        0, 1249, 1256,    0, 1255, 1250,    0, 1257, 1248, 1253,
     1231, 1236, 1244, 1236, 1242, 1236,    0,    0, 1237, 1228,
     1243, 1227, 1227,    0, 1240,    0,    0,    0,    0, 1238,

     1226, 1222, 1235, 1219, 1235, 1219, 1227, 1221, 1229,    0,
        0, 1217, 1231, 1227, 1210, 1209, 1227, 1218, 1221, 1224,
     1218, 1214, 1221, 1208, 1217, 1218, 1200, 1208, 1209, 1197,
        0, 1196, 1199, 1192, 1197, 1205, 1200, 1203, 1689, 1193,
      658, 1201, 1182, 1193, 1189, 1197,    0,    0, 1200, 1191,
     1180, 1184, 1196, 1182,    0,    0,    0, 1182, 1185, 1188,
     1178,    0, 1177,    0, 1185,    0, 1169, 1183,    0, 1167,
     1177, 1165, 1183, 1162, 1162,    0, 1153,    0, 1144, 1149,
     1122, 1120, 1109,  617, 1123, 1104, 1098, 1071, 1083,    0,
     1075, 1044, 1048,    0,    0, 1046,    0, 1026,    0, 1027,

     1020, 1009,    0, 1011, 1003, 1006,    0,    0,  981,    0,
       19,   96,  127,  135,  225,  268,  350,  374,  479,  635,
      488,  530,  622,  626,  619,  628,  632,    0,  639,  631,
      619,  645,  642,  639,  640,  641,  626,  631,  639,  649,
        0,    0,  651,  652,  655,    0,    0,    0,  640,  661,
        0,  652,  642,  649,    0,  652,  656,  659,  655,  667,
      664,  650,  657,  658,  665,  694,  674,  675,  676,  658,
      655,  666,  663,  678,  712,    0,  671,    0,  681,    0,
      667,  675,    0,  688,  672,  684,  677,  681,    0,  691,
        0,    0,  690,    0,    0,  681,    0,  688,  693,    0,

      700,  695,  697,  700,  699,  687,  688,  686,  693,    0,
        0,    0,    0,  704,  696,  691,    0,    0,  698,    0,
      694,  706,  713,  714,  698,  716,  708,    0,    0,  708,
      720,  703,  709,  713,  712,  723,  715,  717,  712,    0,
      727,  728,  715,  726,  732,  726,    0,  724,  726,  726,
        0,  724,  740,    0,    0,    0,  724,    0,  732,  724,
      732,  728,    0,  746,  751,  748,  740,  737,  749,  746,
      749,  737, 1689,  744,  741,  740,  748,  742,  756,    0,
      759,  753,    0,  762,  762,  763,  751,  769,    0,  757,
      760,  755,  756,  761,  762,    0,  773,  759,  799,  800,

        0,    0,  766,  762,  769,    0,  775,  767,  779,    0,
      772,  770,  768,  775,  782,  772,    0,  790,    0,    0,
      778,  782,  778,  775,  780,  792,  797,    0,  804,    0,
      784,  802,    0,  794,  793,  801,  795,  805,  806,    0,
      803,  808,  796,    0,  797,  817,  805,  798,    0,  805,
        0,  821,  814,  797,  818,  808,    0,    0,  821,  814,
        0,    0,  808,  803,  826,  810,    0,  826,    0,    0,
      812,  832,  825,  816,    0, 1689, 1689,  817,  832,  834,
      820,  825,    0,  823,  827,  823,  830,  823,    0,  827,
      838,  846,    0,  829,  847,  848,  832,  834,  853,  830,

        0,    0,    0,    0,  837,  854,    0,    0,  853,  853,
      861,  852,  855,  853,  884,    0,  861,    0,    0, 1689,
      846,    0,  847,  860,  856,    0,  850,  858,  867,  868,
        0,    0,  854,  852,  867,  858,  873,  875,  875,  861,
      862,    0,    0,  865,  869,  870, 1689,  866,    0,    0,
      869,  869,  874,  872,  876,    0,  877,    0,  892,  889,
        0,  890,  891,  892,  880,  896,  891,    0,  881,  897,
        0,    0,    0,  902,  879,  890,  892,  908,  903,  894,
      889,  890,  907,  899,  905,  902,  898,  903,    0,  899,
        0,  904,  917,  896,  919,  910,    0,  905,  921,  924,

     1689,  908,  916,  915,  911,    0,  917,  916,    0,  913,
      914,  921,    0,    0,  921,  921,  933,    0,  930,  935,
      921,  938,  922,    0,    0,    0,  943,  941,  932,    0,
      944,  934,  946,    0,  951,  939,  939,    0,  949,  939,
      943,  941,  939,  938,  943,    0,  946,  946,  948,  948,
        0,    0,  960,  958,  962,  944,    0,    0,    0,  949,
        0, 1689,  999, 1009, 1019, 1029, 1034, 1042, 1052, 1059,
     1069, 1076, 1086, 1096, 1106, 1110, 1119, 1129, 1139, 1149,
     1153, 1162, 1172, 1182, 1192, 1202
    } ;

static yyconst short int yy_def[1287] =
    {   0,
     1262,    1, 1263, 1263, 1262,    5,    1,    1, 1262, 1262,
     1262, 1262, 1262, 1264, 1265, 1262, 1262, 1266, 1262, 1262,
     1262, 1262, 1267, 1262, 1262, 1262, 1262, 1262, 1268, 1269,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1262, 1262, 1262, 1262,
     1262, 1271, 1262, 1272, 1270, 1262, 1264, 1262, 1262, 1273,
     1265, 1262, 1266, 1262, 1262, 1274, 1262, 1275, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1276, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1277, 1268, 1278, 1279, 1269, 1262,

     1280, 1270, 1270, 1270, 1270, 1270, 1270, 1262, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1281, 1270, 1270, 1270, 1262, 1262,

     1271, 1262, 1282, 1272, 1270, 1283, 1264, 1264, 1273, 1284,
     1266, 1266, 1274, 1262, 1275, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1276, 1262, 1277, 1262, 1278, 1262, 1279, 1262,
     1262, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1262,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,

     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1262, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1281, 1270, 1270, 1270, 1271, 1271, 1282, 1270, 1285,

     1283, 1286, 1284, 1262, 1262, 1262, 1262, 1262, 1270, 1270,
     1270, 1262, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,

     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1262, 1270, 1270,
     1270, 1262, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1262, 1270, 1270, 1283, 1285, 1284, 1286, 1270, 1270, 1270,

     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1262, 1270, 1270, 1262, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,

     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1262, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,

     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1262, 1270, 1270, 1262,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1262, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,

     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1262, 1262, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1262, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1262, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,

     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1262, 1262, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1262,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1262, 1262, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1262, 1262, 1270,

     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1262,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1262, 1262, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1262, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,

     1262, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270,    0, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262
    } ;

static yyconst short int yy_nxt[1748] =
    {   0,
       10,   11,   12,   13,   14,   15,   10,   16,   17,   18,
       19,   16,   16,   16,   20,   21,   22,   23,   24,   24,
       24,   24,   24,   25,   26,   27,   28,   29,   10,   10,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   59,   59,
       89,   90,   91,   93,   94,  220,  220,  479,   60,   60,
       10,   10,   61,   10,   62,   10,   10,   10,   10,   10,
       10,   10,   63,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,

       10,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   10,   68,   74,
       69,  926,   84,  162,   78,   79,   75,   80,   80,   80,
       80,   80,   80,   81,   81,   81,   81,   81,   81,   85,
      163,   95,   86,  164,   70,   76,   97,  108,  927,  100,
       84,   82,   80,   80,   80,   80,   80,   80,  192,  193,
      928,   87,  101,  101,  103,  145,  256,   98,  194,  146,
       86,  114,  104,  109,  105,  101,  257,  110,  115,  106,
      111,  107,  119,  112,  124,  116,  120,  241,  117,  284,

      121,  118,  136,  113,  129,  125,  122,  126,  130,  123,
      137,  242,  127,  285,  154,  131,  138,  128,  132,  139,
      140,  133,  150,  195,  134,  147,  151,  141,  155,  148,
      152,  272,  142,  143,  156,  149,  153,  157,  166,  158,
      202,  159,  167,  181,  160,  161,  168,  182,  273,  169,
      183,  184,  170,  171,   68,  172,   69,  185,  173,  196,
      186,   74,  929,  174,  203,  175,  176,  177,   75,  178,
      179,  180,  187,  103,  188,  240,  240,  189,  190,   74,
       70,  104,   68,  205,  208,  250,  212,   76,  106,  251,
      107,   81,   81,   81,   81,   81,   81,   84,  233,   80,

       80,   80,   80,   80,   80,  213,  234,  930,  209,   82,
       81,   81,   81,   81,   81,   81,  259,   86,  216,  216,
      362,  260,  217,  217,  217,  217,  217,  217,   82,  218,
      218,  218,  218,  218,  218,  221,  221,  363,  100,  222,
      222,  222,  222,  222,  222, 1262,  235,  219,  243,  236,
     1262,  101,  101,  248,  425,  244,  252,  253,  254,  261,
      249,  245,  262,  426,  101,  255,  231,  275,  263,  266,
      237, 1262,  267,  280,  276,  264,  265,  300,  290,  281,
      291,  302,  301,  303,  304,  305,  312,  306,  292,  293,
      314,  317,  230,  294,  295,  931,  313,  346,  307,  308,

      315,  320,  321,  322,  322,  328,  318,  309,  347,  329,
      356,  357,  319,  358,  366,  330,  334,  359,  372,  367,
      408,  335,  336,  370,  371,  368,  373,  337,  932,  338,
      349,  339,  340,  202,  341,  342,  388,  343,  374,  350,
      389,  351,  375,  352,  376,  397,  382,  353,   69,  377,
      383,  378,  379,  235,  384,  386,  399,  203,   68,  380,
       69,  387,   68,   68,  401,  208,   75,   74,   74,  398,
      441,   74,  400,  442,   75,  403,  403,  237,  212,  220,
      220,  226,  412,  406,   70,  402,  436,  437,   70,  209,
      240,  240,  422,   76,   76,  597,  423,  213,  217,  217,

      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      218,  218,  218,  218,  218,  218,  404,  404,  933,  228,
      405,  405,  405,  405,  405,  405,  407,  937,  219,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  420,  428,  421,  438,  444,  455,  456,  439,  445,
      487,  462,  429,  463,  508,  508,  494,  430,  431,  938,
      432,  477,  478,  553,  479,  480,  495,  510,  488,  554,
      511,  322,  322,  515,  516,  520,  526,  521,  481,  532,
      573,  202,  574,  555,  527,  568,  533,  556,  482,  583,
      584,  569,  586,  397,  397,  401,  587,  401,  658,  674,

      675,  403,  659,  660,  512,  203,  405,  405,  405,  405,
      405,  405,  585,  623,  661,  508,  508,  203,  398,  595,
      402,  400,  405,  405,  405,  405,  405,  405,  625,  668,
      685,  691,  686,  626,  624,  692,  722,  723,  749,  627,
      735,   69,  401,   75,  403,  812,  780,  669,  813,  681,
      907,  736,  805,  724,  750,  799,  794,  939,  806,  875,
      875,  908,  402,  597,  781,  400,  595,  934,  940,  941,
      942,  943,  910,  944,  935,  945,  946,  947,  948,  949,
      950,  951,  952,  953,  954,  936,  955,  956,  957,  958,
      959,  960,  961,  962,  963,  964,  965,  966,  967,  968,

      969,  970,  971,  972,  973,  975,  976,  977,  477,  978,
      979,  980,  981,  875,  875,  983,  984,  985,  986,  987,
      988,  989,  990,  991,  992,  993,  994,  995,  996,  997,
      998,  999, 1000,  974, 1001, 1002, 1003, 1004, 1005, 1006,
     1007, 1008, 1009,  982, 1010, 1011, 1012, 1014, 1015, 1016,
     1017, 1018, 1019, 1020, 1021, 1022, 1023, 1013, 1024, 1025,
     1026, 1028, 1029, 1030, 1031, 1032, 1027, 1033, 1034, 1035,
     1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,  478, 1044,
     1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
     1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,

     1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1076,
     1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
     1087, 1088, 1089, 1073, 1074, 1090, 1091, 1092, 1093, 1094,
     1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
     1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
     1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
     1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
     1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
     1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
     1154, 1155, 1156, 1157,  973, 1158, 1159, 1160, 1161, 1162,

     1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
     1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
     1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
     1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
     1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
     1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
     1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
     1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
     1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
     1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   71,
      925,   71,   71,   71,   71,   71,   71,   71,   71,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   80,
       80,  924,  923,   80,   96,   96,   96,   96,   96,   96,
       96,   96,   99,   99,   99,   99,   99,   99,   99,  922,
       99,   99,  102,  921,  920,  102,  919,  102,  102,  201,
      918,  201,  201,  201,  201,  201,  201,  201,  201,  204,
      917,  916,  204,  915,  204,  204,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  211,  211,  211,  211,

      211,  211,  211,  211,  211,  211,  215,  914,  215,  215,
      215,  215,  215,  215,  215,  215,  223,  913,  223,  225,
      225,  912,  225,  225,  225,  225,  225,  225,  225,  227,
      227,  227,  227,  911,  227,  227,  227,  227,  227,  229,
      229,  229,  229,  229,  229,  229,  910,  229,  229,  101,
      101,  101,  101,  101,  101,  101,  909,  101,  101,  392,
      906,  392,  396,  905,  396,  396,  396,  396,  396,  396,
      396,  396,  206,  904,  206,  206,  206,  206,  206,  206,
      206,  206,  210,  903,  210,  210,  210,  210,  210,  210,
      210,  210,  594,  902,  594,  594,  594,  594,  594,  594,

      594,  594,  596,  901,  596,  596,  596,  596,  596,  596,
      596,  596,  900,  899,  898,  897,  896,  895,  894,  893,
      892,  891,  890,  889,  888,  887,  886,  885,  884,  883,
      882,  881,  880,  879,  878,  877,  876,  874,  873,  872,
      871,  870,  869,  868,  867,  866,  865,  864,  863,  862,
      861,  860,  859,  858,  857,  856,  855,  854,  853,  852,
      851,  850,  849,  848,  847,  846,  845,  844,  843,  842,
      841,  840,  711,  839,  838,  837,  836,  835,  834,  833,
      832,  831,  830,  829,  828,  827,  826,  825,  824,  823,
      822,  821,  820,  819,  818,  817,  816,  815,  814,  811,

      810,  809,  808,  807,  804,  803,  802,  801,  800,  798,
      797,  796,  795,  794,  793,  792,  791,  790,  789,  788,
      787,  786,  785,  784,  783,  782,  779,  778,  777,  776,
      775,  774,  773,  772,  771,  770,  769,  768,  767,  766,
      765,  764,  480,  763,  762,  761,  760,  759,  758,  757,
      756,  755,  754,  753,  752,  751,  748,  747,  746,  745,
      744,  743,  742,  741,  740,  739,  738,  737,  734,  733,
      732,  731,  730,  729,  728,  727,  726,  725,  721,  720,
      719,  718,  717,  716,  715,  714,  713,  712,  711,  710,
      709,  708,  707,  706,  705,  704,  703,  702,  701,  700,

      699,  698,  697,  696,  695,  694,  693,  690,  689,  688,
      687,  684,  683,  682,  680,  679,  678,  677,  676,  673,
      672,  671,  670,  667,  666,  665,  664,  663,  662,  657,
      656,  655,  654,  653,  652,  651,  650,  649,  648,  647,
      646,  645,  644,  643,  642,  641,  640,  639,  638,  637,
      636,  635,  634,  633,  632,  631,  630,  629,  628,  622,
      621,  620,  619,  618,  617,  616,  615,  614,  613,  612,
      611,  610,  609,  608,  607,  606,  605,  604,  603,  602,
      601,  600,  599,  598,  593,  592,  591,  590,  589,  588,
      582,  581,  580,  579,  578,  577,  576,  575,  572,  571,

      570,  567,  566,  565,  564,  563,  562,  561,  560,  559,
      558,  557,  552,  551,  550,  549,  548,  547,  546,  545,
      544,  543,  542,  541,  540,  539,  538,  537,  536,  535,
      534,  531,  530,  529,  528,  525,  524,  523,  522,  519,
      518,  517,  514,  513,  509,  507,  506,  505,  504,  503,
      502,  501,  500,  499,  498,  497,  496,  493,  492,  491,
      490,  489,  486,  485,  484,  483,  476,  475,  474,  473,
      472,  471,  470,  469,  468,  467,  466,  465,  464,  461,
      460,  459,  458,  457,  454,  453,  452,  451,  450,  449,
      448,  447,  446,  443,  440,  435,  434,  433,  427,  424,

      419,  418,  417,  416,  415,  414,  413,  411,  410,  409,
      201,  395,  394,  393,  391,  390,  385,  381,  369,  365,
      364,  361,  360,  355,  354,  348,  345,  344,  333,  332,
      331,  327,  326,  325,  324,  323,  316,  311,  310,  299,
      298,  297,  296,  289,  288,  287,  286,  283,  282,  279,
      278,  277,  274,  271,  270,  269,  268,  258,  247,  246,
      239,  238,  232,  100,  230,  228,  226,  224,  214,  210,
      206,  200,  199,  198,  197,  191,  165,  144,  135,   92,
       88,   83,   77,   72,   66, 1262,   65,   65,    9, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262
    } ;

static yyconst short int yy_chk[1748] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
       26,   26,   26,   28,   28,   85,   85,  811,    3,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,   14,   18,
       14,  812,   23,   46,   20,   20,   18,   20,   20,   20,
       20,   20,   20,   21,   21,   21,   21,   21,   21,   23,
       46,   29,   23,   46,   14,   18,   29,   32,  813,   30,
       24,   21,   24,   24,   24,   24,   24,   24,   53,   53,
      814,   23,   30,   30,   31,   41,  117,   29,   53,   41,
       24,   33,   31,   32,   31,   30,  117,   32,   33,   31,
       32,   31,   34,   32,   35,   33,   34,  109,   33,  135,

       34,   33,   38,   32,   36,   35,   34,   35,   36,   34,
       38,  109,   35,  135,   44,   36,   38,   35,   36,   39,
       39,   36,   43,   54,   36,   42,   43,   39,   44,   42,
       43,  126,   39,   39,   44,   42,   43,   45,   48,   45,
       62,   45,   48,   50,   45,   45,   48,   50,  126,   48,
       50,   50,   48,   49,   67,   49,   67,   50,   49,   54,
       50,   73,  815,   49,   62,   49,   49,   49,   73,   49,
       49,   49,   51,   65,   51,  108,  108,   51,   51,   76,
       67,   65,   70,   65,   70,  115,   76,   73,   65,  115,
       65,   79,   79,   79,   79,   79,   79,   80,  104,   80,

       80,   80,   80,   80,   80,   76,  104,  816,   70,   79,
       81,   81,   81,   81,   81,   81,  119,   80,   82,   82,
      179,  119,   82,   82,   82,   82,   82,   82,   81,   84,
       84,   84,   84,   84,   84,   86,   86,  179,   99,   86,
       86,   86,   86,   86,   86,   96,  105,   84,  110,  105,
       96,   99,   99,  114,  252,  110,  116,  116,  116,  120,
      114,  110,  120,  252,   99,  116,   99,  128,  120,  121,
      105,   96,  121,  132,  128,  120,  120,  147,  141,  132,
      141,  148,  147,  148,  148,  149,  152,  149,  141,  141,
      153,  155,  229,  141,  141,  817,  152,  170,  149,  149,

      153,  156,  156,  157,  157,  163,  155,  149,  170,  163,
      175,  175,  155,  176,  182,  163,  167,  176,  186,  182,
      229,  167,  167,  184,  184,  182,  186,  167,  818,  167,
      172,  167,  167,  201,  167,  167,  192,  167,  186,  172,
      192,  172,  187,  172,  187,  203,  189,  172,  206,  187,
      189,  187,  187,  205,  189,  191,  205,  201,  207,  187,
      207,  191,  208,  209,  208,  209,  210,  211,  212,  203,
      261,  213,  206,  261,  211,  212,  402,  205,  213,  220,
      220,  225,  240,  225,  207,  210,  258,  258,  208,  209,
      240,  240,  250,  211,  212,  402,  250,  213,  216,  216,

      216,  216,  216,  216,  217,  217,  217,  217,  217,  217,
      218,  218,  218,  218,  218,  218,  219,  219,  819,  227,
      219,  219,  219,  219,  219,  219,  227,  821,  218,  221,
      221,  221,  221,  221,  221,  222,  222,  222,  222,  222,
      222,  249,  254,  249,  259,  263,  275,  275,  259,  263,
      300,  281,  254,  281,  319,  319,  306,  254,  254,  822,
      254,  295,  295,  360,  295,  295,  306,  321,  300,  360,
      321,  322,  322,  325,  325,  329,  334,  329,  295,  339,
      377,  396,  377,  360,  334,  373,  339,  360,  295,  387,
      387,  373,  388,  397,  398,  400,  388,  401,  476,  502,

      502,  403,  476,  481,  322,  396,  404,  404,  404,  404,
      404,  404,  387,  439,  481,  508,  508,  397,  398,  400,
      403,  401,  405,  405,  405,  405,  405,  405,  440,  496,
      513,  519,  513,  440,  439,  519,  553,  553,  581,  440,
      566,  594,  595,  596,  597,  661,  623,  496,  661,  508,
      784,  566,  652,  553,  581,  643,  643,  823,  652,  741,
      741,  784,  596,  597,  623,  594,  595,  820,  824,  825,
      826,  827,  829,  830,  820,  831,  832,  833,  834,  835,
      836,  837,  838,  839,  840,  820,  843,  844,  845,  849,
      850,  852,  853,  854,  856,  857,  858,  859,  860,  861,

      862,  863,  864,  865,  866,  867,  868,  869,  870,  871,
      872,  873,  874,  875,  875,  877,  879,  881,  882,  884,
      885,  886,  887,  888,  890,  893,  896,  898,  899,  901,
      902,  903,  904,  866,  905,  906,  907,  908,  909,  914,
      915,  916,  919,  875,  921,  922,  923,  924,  925,  926,
      927,  930,  931,  932,  933,  934,  935,  923,  936,  937,
      938,  939,  941,  942,  943,  944,  938,  945,  946,  948,
      949,  950,  952,  953,  957,  959,  960,  961,  962,  964,
      965,  966,  967,  968,  969,  970,  971,  972,  974,  975,
      976,  977,  978,  979,  981,  982,  984,  985,  986,  987,

      988,  990,  991,  992,  993,  994,  995,  997,  998,  999,
     1000, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013,
     1014, 1015, 1016,  997,  997, 1018, 1021, 1022, 1023, 1024,
     1025, 1026, 1027, 1029, 1031, 1032, 1034, 1035, 1036, 1037,
     1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050,
     1052, 1053, 1054, 1055, 1056, 1059, 1060, 1063, 1064, 1065,
     1066, 1068, 1071, 1072, 1073, 1074, 1078, 1079, 1080, 1081,
     1082, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1094,
     1095, 1096, 1097, 1098, 1099, 1100, 1105, 1106, 1109, 1110,
     1111, 1112, 1113, 1114, 1115, 1117, 1121, 1123, 1124, 1125,

     1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137, 1138,
     1139, 1140, 1141, 1144, 1145, 1146, 1148, 1151, 1152, 1153,
     1154, 1155, 1157, 1159, 1160, 1162, 1163, 1164, 1165, 1166,
     1167, 1169, 1170, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
     1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1192,
     1193, 1194, 1195, 1196, 1198, 1199, 1200, 1202, 1203, 1204,
     1205, 1207, 1208, 1210, 1211, 1212, 1215, 1216, 1217, 1219,
     1220, 1221, 1222, 1223, 1227, 1228, 1229, 1231, 1232, 1233,
     1235, 1236, 1237, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
     1247, 1248, 1249, 1250, 1253, 1254, 1255, 1256, 1260, 1263,

     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1265,
      809, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1267,
     1267,  806,  805, 1267, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1269, 1269, 1269, 1269, 1269, 1269, 1269,  804,
     1269, 1269, 1270,  802,  801, 1270,  800, 1270, 1270, 1271,
      798, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1272,
      796,  793, 1272,  792, 1272, 1272, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1274, 1274, 1274, 1274,

     1274, 1274, 1274, 1274, 1274, 1274, 1275,  791, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1276,  789, 1276, 1277,
     1277,  788, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1278,
     1278, 1278, 1278,  787, 1278, 1278, 1278, 1278, 1278, 1279,
     1279, 1279, 1279, 1279, 1279, 1279,  786, 1279, 1279, 1280,
     1280, 1280, 1280, 1280, 1280, 1280,  785, 1280, 1280, 1281,
      783, 1281, 1282,  782, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1283,  781, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1284,  780, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1285,  779, 1285, 1285, 1285, 1285, 1285, 1285,

     1285, 1285, 1286,  777, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286,  775,  774,  773,  772,  771,  770,  768,  767,
      765,  763,  761,  760,  759,  758,  754,  753,  752,  751,
      750,  749,  746,  745,  744,  743,  742,  740,  738,  737,
      736,  735,  734,  733,  732,  730,  729,  728,  727,  726,
      725,  724,  723,  722,  721,  720,  719,  718,  717,  716,
      715,  714,  713,  712,  709,  708,  707,  706,  705,  704,
      703,  702,  701,  700,  695,  693,  692,  691,  690,  689,
      686,  685,  684,  683,  682,  681,  680,  679,  678,  676,
      675,  673,  672,  670,  669,  668,  667,  663,  662,  660,

      659,  658,  655,  653,  651,  650,  647,  646,  644,  640,
      639,  638,  637,  636,  635,  634,  633,  632,  631,  630,
      629,  628,  627,  626,  625,  624,  622,  621,  620,  618,
      616,  615,  614,  613,  612,  611,  610,  609,  607,  606,
      605,  604,  603,  602,  601,  600,  599,  593,  592,  590,
      588,  587,  585,  584,  583,  582,  580,  579,  578,  577,
      576,  575,  574,  573,  571,  569,  568,  567,  565,  562,
      561,  560,  559,  558,  557,  556,  555,  554,  552,  551,
      550,  548,  546,  545,  544,  543,  542,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  528,

      526,  525,  524,  523,  522,  521,  520,  518,  516,  515,
      514,  512,  511,  510,  507,  506,  505,  504,  503,  501,
      500,  499,  498,  494,  492,  491,  488,  487,  483,  475,
      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      463,  462,  461,  460,  459,  458,  457,  455,  454,  452,
      449,  448,  447,  446,  445,  444,  443,  442,  441,  438,
      437,  436,  435,  434,  433,  432,  431,  430,  429,  428,
      427,  426,  425,  424,  423,  422,  420,  416,  415,  414,
      413,  411,  410,  409,  395,  394,  392,  391,  390,  389,
      386,  385,  384,  382,  381,  380,  379,  378,  376,  375,

      374,  372,  371,  370,  369,  368,  367,  366,  365,  364,
      363,  362,  359,  358,  357,  356,  355,  354,  352,  351,
      350,  349,  348,  347,  346,  345,  344,  343,  342,  341,
      340,  338,  337,  336,  335,  333,  332,  331,  330,  328,
      327,  326,  324,  323,  320,  318,  317,  316,  315,  314,
      313,  312,  311,  310,  309,  308,  307,  305,  304,  303,
      302,  301,  299,  298,  297,  296,  294,  293,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  282,  280,
      279,  278,  277,  276,  274,  273,  271,  270,  269,  268,
      266,  265,  264,  262,  260,  257,  256,  255,  253,  251,

      248,  247,  246,  244,  243,  242,  241,  239,  235,  234,
      202,  198,  197,  196,  194,  193,  190,  188,  183,  181,
      180,  178,  177,  174,  173,  171,  169,  168,  166,  165,
      164,  162,  161,  160,  159,  158,  154,  151,  150,  146,
      145,  144,  143,  140,  138,  137,  136,  134,  133,  131,
      130,  129,  127,  125,  124,  123,  122,  118,  112,  111,
      107,  106,  103,  101,   98,   97,   95,   90,   77,   75,
       69,   60,   57,   56,   55,   52,   47,   40,   37,   27,
       25,   22,   19,   17,   13,    9,    8,    7, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "us/1csql/1csql.l"
#define INITIAL 0
/* Companion source code for "flex & bison", published by O'Reilly
 * Media, ISBN 978-0-596-15597-1
 * Copyright (c) 2009, Taughannock Networks. All rights reserved.
 * See the README file for license conditions and contact info.
 * $Header: /home/johnl/flnb/code/sql/RCS/pmysql.l,v 2.1 2009/11/08 02:53:39 johnl Exp $
 */
/*
 * Scanner for mysql subset
 */
#line 14 "us/1csql/1csql.l"
#include "1csql.tab.h"
#include "1csql.h"
#include "CAst.h"
#include <stdarg.h>
#include <string.h>
#include <stdio.h>
#include <vector>

void yyerror(char *s, ...);

std::vector<int> oldstate;

#define COMMENT 1
#define DOT_NAME 2

#define BTWMODE 3

#line 1380 "us\\1csql\\1csql.lex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 31 "us/1csql/1csql.l"


  /* keywords */

#line 1536 "us\\1csql\\1csql.lex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1263 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1689 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 35 "us/1csql/1csql.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 36 "us/1csql/1csql.l"
{ return ALL; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 37 "us/1csql/1csql.l"
{ return ALTER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 38 "us/1csql/1csql.l"
{ return ANALYZE; }
	YY_BREAK
/* Hack for BETWEEN ... AND ... 
   * return special AND token if BETWEEN seen
   */
case 5:
YY_RULE_SETUP
#line 43 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); return AND; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 44 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return ANDOP; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 45 "us/1csql/1csql.l"
{ return ANY; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 46 "us/1csql/1csql.l"
{ return AS; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 47 "us/1csql/1csql.l"
{ return ASC; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 48 "us/1csql/1csql.l"
{ return AUTO_INCREMENT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 49 "us/1csql/1csql.l"
{ return BEFORE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 50 "us/1csql/1csql.l"
{ oldstate.push_back(YY_START); BEGIN BTWMODE; return BETWEEN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 51 "us/1csql/1csql.l"
{ return BIGINT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 52 "us/1csql/1csql.l"
{ return BINARY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 53 "us/1csql/1csql.l"
{ return BIT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 54 "us/1csql/1csql.l"
{ return BLOB; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 55 "us/1csql/1csql.l"
{ return BOTH; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 56 "us/1csql/1csql.l"
{ return BY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 57 "us/1csql/1csql.l"
{ return CALL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 58 "us/1csql/1csql.l"
{ return CASCADE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 59 "us/1csql/1csql.l"
{ return CASE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 60 "us/1csql/1csql.l"
{ return CHANGE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 61 "us/1csql/1csql.l"
{ return CHAR; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 62 "us/1csql/1csql.l"
{ return CHECK; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 63 "us/1csql/1csql.l"
{ return COLLATE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 64 "us/1csql/1csql.l"
{ return COLUMN; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 65 "us/1csql/1csql.l"
{ return COMMENT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 66 "us/1csql/1csql.l"
{ return CONDITION; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 67 "us/1csql/1csql.l"
{ return CONNECT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 68 "us/1csql/1csql.l"
{ return CONSTRAINT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 69 "us/1csql/1csql.l"
{ return CONTINUE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 70 "us/1csql/1csql.l"
{ return CONVERT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 71 "us/1csql/1csql.l"
{ return CREATE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 72 "us/1csql/1csql.l"
{ return CROSS; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 73 "us/1csql/1csql.l"
{ return CURRENT_DATE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 74 "us/1csql/1csql.l"
{ return CURRENT_TIME; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 75 "us/1csql/1csql.l"
{ return CURRENT_TIMESTAMP; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 76 "us/1csql/1csql.l"
{ return CURRENT_USER; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 77 "us/1csql/1csql.l"
{ return CURRENT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 78 "us/1csql/1csql.l"
{ return CURSOR; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 79 "us/1csql/1csql.l"
{ return DATABASE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 80 "us/1csql/1csql.l"
{ return DATABASES; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 81 "us/1csql/1csql.l"
{ return DATE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 82 "us/1csql/1csql.l"
{ return DATETIME; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 83 "us/1csql/1csql.l"
{ return DAY; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 84 "us/1csql/1csql.l"
{ return DAY_HOUR; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 85 "us/1csql/1csql.l"
{ return DAY_MICROSECOND; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 86 "us/1csql/1csql.l"
{ return DAY_MINUTE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 87 "us/1csql/1csql.l"
{ return DAY_SECOND; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 88 "us/1csql/1csql.l"
{ return DECIMAL; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 89 "us/1csql/1csql.l"
{ return DECLARE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 90 "us/1csql/1csql.l"
{ return DEFAULT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 91 "us/1csql/1csql.l"
{ return DELAYED; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 92 "us/1csql/1csql.l"
{ return DELETE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 93 "us/1csql/1csql.l"
{ return DESC; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 94 "us/1csql/1csql.l"
{ return DESCRIBE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 95 "us/1csql/1csql.l"
{ return DETERMINISTIC; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 96 "us/1csql/1csql.l"
{ return DISTINCT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 97 "us/1csql/1csql.l"
{ return DISTINCTROW; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 98 "us/1csql/1csql.l"
{ return DIV; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 99 "us/1csql/1csql.l"
{ return DOUBLE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 100 "us/1csql/1csql.l"
{ return DROP; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 101 "us/1csql/1csql.l"
{ return EACH; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 102 "us/1csql/1csql.l"
{ return ELSE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 103 "us/1csql/1csql.l"
{ return ELSEIF; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 104 "us/1csql/1csql.l"
{ return END; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 105 "us/1csql/1csql.l"
{ return ENUM; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 106 "us/1csql/1csql.l"
{ return ESCAPED; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 107 "us/1csql/1csql.l"
{ yylval.subtok = 0; return EXISTS; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 108 "us/1csql/1csql.l"
{ yylval.subtok = 1; return EXISTS; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 109 "us/1csql/1csql.l"
{ return EXIT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 110 "us/1csql/1csql.l"
{ return EXPLAIN; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 111 "us/1csql/1csql.l"
{ return FETCH; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 112 "us/1csql/1csql.l"
{ return FLOAT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 113 "us/1csql/1csql.l"
{ return FOLLOWING; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 114 "us/1csql/1csql.l"
{ return FOR; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 115 "us/1csql/1csql.l"
{ return FORCE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 116 "us/1csql/1csql.l"
{ return FOREIGN; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 117 "us/1csql/1csql.l"
{ return FROM; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 118 "us/1csql/1csql.l"
{ return FULLTEXT; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 119 "us/1csql/1csql.l"
{ return GRANT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 120 "us/1csql/1csql.l"
{ return GROUP; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 121 "us/1csql/1csql.l"
{ return HAVING; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 122 "us/1csql/1csql.l"
{ return HIGH_PRIORITY; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 123 "us/1csql/1csql.l"
{ return HOUR; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 124 "us/1csql/1csql.l"
{ return HOUR_MICROSECOND; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 125 "us/1csql/1csql.l"
{ return HOUR_MINUTE; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 126 "us/1csql/1csql.l"
{ return HOUR_SECOND; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 127 "us/1csql/1csql.l"
{ return IF; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 128 "us/1csql/1csql.l"
{ return IGNORE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 129 "us/1csql/1csql.l"
{ return IN; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 130 "us/1csql/1csql.l"
{ return INFILE; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 131 "us/1csql/1csql.l"
{ return INNER; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 132 "us/1csql/1csql.l"
{ return INOUT; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 133 "us/1csql/1csql.l"
{ return INSENSITIVE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 134 "us/1csql/1csql.l"
{ return INSERT; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 135 "us/1csql/1csql.l"
{ return INTEGER; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 136 "us/1csql/1csql.l"
{ return INTERVAL; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 137 "us/1csql/1csql.l"
{ return INTO; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 138 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return UNION; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 139 "us/1csql/1csql.l"
{ return IS; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 140 "us/1csql/1csql.l"
{ return ITERATE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 141 "us/1csql/1csql.l"
{ return JOIN; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 142 "us/1csql/1csql.l"
{ return KEY; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 143 "us/1csql/1csql.l"
{ return KEYS; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 144 "us/1csql/1csql.l"
{ return KILL; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 145 "us/1csql/1csql.l"
{ return LEADING; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 146 "us/1csql/1csql.l"
{ return LEAVE; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 147 "us/1csql/1csql.l"
{ return LEFT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 148 "us/1csql/1csql.l"
{ return LIKE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 149 "us/1csql/1csql.l"
{ return LIMIT; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 150 "us/1csql/1csql.l"
{ return LINES; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 151 "us/1csql/1csql.l"
{ return LOAD; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 152 "us/1csql/1csql.l"
{ return LOCALTIME; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 153 "us/1csql/1csql.l"
{ return LOCALTIMESTAMP; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 154 "us/1csql/1csql.l"
{ return LOCK; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 155 "us/1csql/1csql.l"
{ return LONG; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 156 "us/1csql/1csql.l"
{ return LONGBLOB; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 157 "us/1csql/1csql.l"
{ return LONGTEXT; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 158 "us/1csql/1csql.l"
{ return LOOP; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 159 "us/1csql/1csql.l"
{ return LOW_PRIORITY; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 160 "us/1csql/1csql.l"
{ return MATCH; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 161 "us/1csql/1csql.l"
{ return MEDIUMBLOB; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 162 "us/1csql/1csql.l"
{ return MEDIUMINT; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 163 "us/1csql/1csql.l"
{ return MEDIUMTEXT; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 164 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return UNION; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 165 "us/1csql/1csql.l"
{ return MINUTE_MICROSECOND; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 166 "us/1csql/1csql.l"
{ return MINUTE; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 167 "us/1csql/1csql.l"
{ return MINUTE_SECOND; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 168 "us/1csql/1csql.l"
{ return MOD; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 169 "us/1csql/1csql.l"
{ return MODIFIES; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 170 "us/1csql/1csql.l"
{ return MONTH; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 171 "us/1csql/1csql.l"
{ return NATURAL; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 172 "us/1csql/1csql.l"
{ return NONCYCLE; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 173 "us/1csql/1csql.l"
{ return NOT; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 174 "us/1csql/1csql.l"
{ return NO_WRITE_TO_BINLOG; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 175 "us/1csql/1csql.l"
{ return NULLX; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 176 "us/1csql/1csql.l"
{ return NUMBER; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 177 "us/1csql/1csql.l"
{ return ON; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 178 "us/1csql/1csql.l"
{ return ONDUPLICATE; } /* hack due to limited lookahead */
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 179 "us/1csql/1csql.l"
{ return OPTIMIZE; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 180 "us/1csql/1csql.l"
{ return OPTION; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 181 "us/1csql/1csql.l"
{ return OPTIONALLY; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 182 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return OR; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 183 "us/1csql/1csql.l"
{ return ORDER; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 184 "us/1csql/1csql.l"
{ return OVER; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 185 "us/1csql/1csql.l"
{ return OUT; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 186 "us/1csql/1csql.l"
{ return OUTER; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 187 "us/1csql/1csql.l"
{ return OUTFILE; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 188 "us/1csql/1csql.l"
{ return PARTITION; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 189 "us/1csql/1csql.l"
{ return PRECEDING; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 190 "us/1csql/1csql.l"
{ return PRECISION; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 191 "us/1csql/1csql.l"
{ return PRIMARY; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 192 "us/1csql/1csql.l"
{ return PRIOR; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 193 "us/1csql/1csql.l"
{ return PROCEDURE; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 194 "us/1csql/1csql.l"
{ return PURGE; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 195 "us/1csql/1csql.l"
{ return QUICK; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 196 "us/1csql/1csql.l"
{ return RANGE; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 197 "us/1csql/1csql.l"
{ return READ; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 198 "us/1csql/1csql.l"
{ return READS; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 199 "us/1csql/1csql.l"
{ return REAL; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 200 "us/1csql/1csql.l"
{ return REFERENCES; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 201 "us/1csql/1csql.l"
{ return REGEXP; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 202 "us/1csql/1csql.l"
{ return RELEASE; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 203 "us/1csql/1csql.l"
{ return RENAME; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 204 "us/1csql/1csql.l"
{ return REPEAT; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 205 "us/1csql/1csql.l"
{ return REPLACE; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 206 "us/1csql/1csql.l"
{ return REQUIRE; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 207 "us/1csql/1csql.l"
{ return RESTRICT; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 208 "us/1csql/1csql.l"
{ return RETURN; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 209 "us/1csql/1csql.l"
{ return REVOKE; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 210 "us/1csql/1csql.l"
{ return RIGHT; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 211 "us/1csql/1csql.l"
{ return ROLLUP; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 212 "us/1csql/1csql.l"
{ return ROWS; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 213 "us/1csql/1csql.l"
{ return ROW; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 214 "us/1csql/1csql.l"
{ return SCHEMA; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 215 "us/1csql/1csql.l"
{ return SCHEMAS; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 216 "us/1csql/1csql.l"
{ return SECOND; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 217 "us/1csql/1csql.l"
{ return SECOND_MICROSECOND; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 218 "us/1csql/1csql.l"
{ return SELECT; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 219 "us/1csql/1csql.l"
{ return SENSITIVE; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 220 "us/1csql/1csql.l"
{ return SEPARATOR; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 221 "us/1csql/1csql.l"
{ return SET; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 222 "us/1csql/1csql.l"
{ return SHOW; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 223 "us/1csql/1csql.l"
{ return SMALLINT; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 224 "us/1csql/1csql.l"
{ return SOME; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 225 "us/1csql/1csql.l"
{ return SONAME; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 226 "us/1csql/1csql.l"
{ return SPATIAL; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 227 "us/1csql/1csql.l"
{ return SPECIFIC; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 228 "us/1csql/1csql.l"
{ return SQL; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 229 "us/1csql/1csql.l"
{ return SQLEXCEPTION; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 230 "us/1csql/1csql.l"
{ return SQLSTATE; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 231 "us/1csql/1csql.l"
{ return SQLWARNING; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 232 "us/1csql/1csql.l"
{ return SQL_BIG_RESULT; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 233 "us/1csql/1csql.l"
{ return SQL_CALC_FOUND_ROWS; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 234 "us/1csql/1csql.l"
{ return SQL_SMALL_RESULT; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 235 "us/1csql/1csql.l"
{ return SSL; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 236 "us/1csql/1csql.l"
{ return START; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 237 "us/1csql/1csql.l"
{ return STARTING; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 238 "us/1csql/1csql.l"
{ return STRAIGHT_JOIN; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 239 "us/1csql/1csql.l"
{ return TABLE; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 240 "us/1csql/1csql.l"
{ return TEMPORARY; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 241 "us/1csql/1csql.l"
{ return TERMINATED; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 242 "us/1csql/1csql.l"
{ return TEXT; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 243 "us/1csql/1csql.l"
{ return THEN; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 244 "us/1csql/1csql.l"
{ return TIME; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 245 "us/1csql/1csql.l"
{ return TIMESTAMP; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 246 "us/1csql/1csql.l"
{ return TINYINT; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 247 "us/1csql/1csql.l"
{ return TINYTEXT; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 248 "us/1csql/1csql.l"
{ return TO; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 249 "us/1csql/1csql.l"
{ return TRAILING; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 250 "us/1csql/1csql.l"
{ return TRIGGER; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 251 "us/1csql/1csql.l"
{ return UNDO; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 252 "us/1csql/1csql.l"
{ return UNBOUNDED; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 253 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return UNION; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 254 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return UNION; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 255 "us/1csql/1csql.l"
{ return UNIQUE; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 256 "us/1csql/1csql.l"
{ return UNLOCK; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 257 "us/1csql/1csql.l"
{ return UNSIGNED; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 258 "us/1csql/1csql.l"
{ return UPDATE; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 259 "us/1csql/1csql.l"
{ return USAGE; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 260 "us/1csql/1csql.l"
{ return USE; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 261 "us/1csql/1csql.l"
{ return USING; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 262 "us/1csql/1csql.l"
{ return UTC_DATE; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 263 "us/1csql/1csql.l"
{ return UTC_TIME; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 264 "us/1csql/1csql.l"
{ return UTC_TIMESTAMP; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 265 "us/1csql/1csql.l"
{ return VALUES; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 266 "us/1csql/1csql.l"
{ return VARBINARY; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 267 "us/1csql/1csql.l"
{ return VARCHAR; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 268 "us/1csql/1csql.l"
{ return VARYING; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 269 "us/1csql/1csql.l"
{ return WHEN; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 270 "us/1csql/1csql.l"
{ return WHERE; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 271 "us/1csql/1csql.l"
{ return WHILE; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 272 "us/1csql/1csql.l"
{ return WITH; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 273 "us/1csql/1csql.l"
{ return WRITE; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 274 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return XOR; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 275 "us/1csql/1csql.l"
{ return YEAR; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 276 "us/1csql/1csql.l"
{ return YEAR_MONTH; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 277 "us/1csql/1csql.l"
{ return ZEROFILL; }
	YY_BREAK
/* numbers */
case 240:
YY_RULE_SETUP
#line 281 "us/1csql/1csql.l"
{ yylval.intval = atoi(yytext); return INTNUM; } 
	YY_BREAK
case 241:
#line 284 "us/1csql/1csql.l"
case 242:
#line 285 "us/1csql/1csql.l"
case 243:
#line 286 "us/1csql/1csql.l"
case 244:
#line 287 "us/1csql/1csql.l"
case 245:
YY_RULE_SETUP
#line 287 "us/1csql/1csql.l"
{ yylval.floatval = atof(yytext) ;
                                  return APPROXNUM; }
	YY_BREAK
/* booleans */
case 246:
YY_RULE_SETUP
#line 290 "us/1csql/1csql.l"
{ yylval.boolval = true; return BOOL; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 291 "us/1csql/1csql.l"
{ yylval.boolval = false; return BOOL; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 292 "us/1csql/1csql.l"
{ yylval.boolval = false; return BOOL; }
	YY_BREAK
/* strings */
case 249:
YY_RULE_SETUP
#line 296 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 297 "us/1csql/1csql.l"
{ yylval.qpsz = newQuot_psz(true); yylval.qpsz->psz = (char*)malloc(strlen(yytext)-1); memset(yylval.qpsz->psz, '\0', strlen(yytext)-1); strncpy(yylval.qpsz->psz, yytext+1, strlen(yytext)-2); return NAME; }
	YY_BREAK
case 251:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 299 "us/1csql/1csql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
case 252:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 300 "us/1csql/1csql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
/* hex strings */
case 253:
#line 304 "us/1csql/1csql.l"
case 254:
YY_RULE_SETUP
#line 304 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
/* bit strings */
case 255:
#line 309 "us/1csql/1csql.l"
case 256:
YY_RULE_SETUP
#line 309 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
/* name followed by the dot */
case 257:
YY_RULE_SETUP
#line 312 "us/1csql/1csql.l"
{ oldstate.push_back(YY_START); BEGIN DOT_NAME; return yytext[0]; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 313 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); yylval.qpsz = newQuot_psz(yytext, false); return NAME; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 314 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); yylval.qpsz = newQuot_psz(true); yylval.qpsz->psz = (char*)malloc(strlen(yytext)-1); memset(yylval.qpsz->psz, '\0', strlen(yytext)-1); strncpy(yylval.qpsz->psz, yytext+1, strlen(yytext)-2); return NAME; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 315 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); yylval.qpsz = newQuot_psz(yytext, false); return NAME; }
	YY_BREAK
/* operators */
case 261:
YY_RULE_SETUP
#line 318 "us/1csql/1csql.l"
{ return yytext[0]; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 320 "us/1csql/1csql.l"
{ return ANDOP; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 321 "us/1csql/1csql.l"
{ return CONCAT; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 323 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 324 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 325 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 326 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 327 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 328 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 270:
#line 330 "us/1csql/1csql.l"
case 271:
YY_RULE_SETUP
#line 330 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 331 "us/1csql/1csql.l"
{ return PARASSIGN; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 333 "us/1csql/1csql.l"
{ return OUTPLUS; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 335 "us/1csql/1csql.l"
{ yylval.subtok = 1; return SHIFT; }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 336 "us/1csql/1csql.l"
{ yylval.subtok = 2; return SHIFT; }
	YY_BREAK
/* functions */
case 276:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 340 "us/1csql/1csql.l"
{ return FSUBSTRING; }
	YY_BREAK
case 277:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 341 "us/1csql/1csql.l"
{ return FTRIM; }
	YY_BREAK
case 278:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 342 "us/1csql/1csql.l"
{ return FDATE_ADD; }
	YY_BREAK
case 279:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 343 "us/1csql/1csql.l"
{ return FDATE_SUB; }
	YY_BREAK
/* 
         * peek ahead and return function if name(
         */
case 280:
YY_RULE_SETUP
#line 348 "us/1csql/1csql.l"
{ int c = yyinput(); unput(c);
           if(c == '(') return FCOUNT;
           yylval.qpsz = newQuot_psz(yytext, false);
           return NAME; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 353 "us/1csql/1csql.l"
{ yylval.qpsz = newQuot_psz(yytext, false);
                          return NAME; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 355 "us/1csql/1csql.l"
{ yylval.qpsz = newQuot_psz(yytext+1, false);
						  yylval.qpsz->psz[yyleng-2] = 0;
                          return NAME; }
	YY_BREAK
case 283:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 359 "us/1csql/1csql.l"
{ yyerror("unterminated quoted name %s", yytext); }
	YY_BREAK
/* user variables */
case 284:
#line 363 "us/1csql/1csql.l"
case 285:
#line 364 "us/1csql/1csql.l"
case 286:
#line 365 "us/1csql/1csql.l"
case 287:
YY_RULE_SETUP
#line 365 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext+1); return USERVAR; }
	YY_BREAK
case 288:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 367 "us/1csql/1csql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 289:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 368 "us/1csql/1csql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 290:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 369 "us/1csql/1csql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 372 "us/1csql/1csql.l"
{ return ASSIGN; }
	YY_BREAK
/* comments */   
case 292:
YY_RULE_SETUP
#line 375 "us/1csql/1csql.l"
;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 376 "us/1csql/1csql.l"
;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 378 "us/1csql/1csql.l"
{ oldstate.push_back(YY_START); BEGIN COMMENT; }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 379 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 380 "us/1csql/1csql.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 381 "us/1csql/1csql.l"
{ yyerror("unclosed comment"); }
	YY_BREAK
/* everything else */
case 297:
YY_RULE_SETUP
#line 384 "us/1csql/1csql.l"
/* white space */
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 385 "us/1csql/1csql.l"
{ yyerror("mystery character '%c'", *yytext); }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 387 "us/1csql/1csql.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3150 "us\\1csql\\1csql.lex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(DOT_NAME):
			case YY_STATE_EOF(BTWMODE):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1263 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1263 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1262);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 387 "us/1csql/1csql.l"


