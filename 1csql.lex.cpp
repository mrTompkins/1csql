#line 2 "us\\1csql\\1csql.lex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <io.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 348
#define YY_END_OF_BUFFER 349
static yyconst short int yy_acclist[1848] =
    {   0,
      349,  347,  348,  346,  347,  348,  346,  348,  306,  347,
      348,  347,  348,  340,  347,  348,  306,  347,  348,  347,
      348,  347,  348,  306,  347,  348,  306,  347,  348,  301,
      306,  347,  348,  306,  347,  348,  284,  347,  348,  284,
      347,  348,  347,  348,  314,  347,  348,  309,  347,  348,
      312,  347,  348,  347,  348,  347,  348,  328,  347,  348,
      328,  347,  348,  328,  347,  348,  328,  347,  348,  328,
      347,  348,  328,  347,  348,  328,  347,  348,  328,  347,
      348,  328,  347,  348,  328,  347,  348,  328,  347,  348,
      328,  347,  348,  328,  347,  348,  328,  347,  348,  328,

      347,  348,  328,  347,  348,  328,  347,  348,  328,  347,
      348,  328,  347,  348,  328,  347,  348,  328,  347,  348,
      328,  347,  348,  328,  347,  348,  328,  347,  348,  328,
      347,  348,  328,  347,  348,  306,  347,  348,  328,  347,
      348,  112,  328,  347,  348,  328,  347,  348,  328,  347,
      348,  328,  347,  348,   11,  328,  347,  348,  328,  347,
      348,  328,  347,  348,  328,  347,  348,  328,  347,  348,
      328,  347,  348,  328,  347,  348,  328,  347,  348,  328,
      347,  348,  328,  347,  348,  328,  347,  348,  345,  347,
      348,  345,  348,  345,  347,  348,  348,  347,  348,  305,

      347,  348,  304,  347,  348,  302,  347,  348,  328,  347,
      348,    9,   11,  328,  347,  348,  315,  296,  294,  340,
      307,  295,  293,  341,  284,  286,  343,  342,  285,  339,
      319,  313,  316,  317,  311,  320,  332,  330,  328,  328,
      328,  328,   13,  328,  328,  328,  328,  328,  328,   26,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  109,  328,  328,
      111,  328,  124,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  169,  328,

      328,  175,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  247,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  308,  328,  328,  328,  328,  328,  328,  328,
       97,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      165,  328,  328,  328,  170,  328,  328,  328,  328,  328,
      328,  328,  328,  344,  303,  302,  328,  294,  331,  293,
      318,  341,  289,  342,  285,  299,  287,  298,  310,  336,
      338,  337,  329,    1,  328,    2,  328,  328,  328,   10,

      328,   12,  328,   15,  328,  328,  328,  328,  328,  328,
       23,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,   55,  328,   60,  328,
      328,  328,  328,  328,  328,   72,  328,  328,  328,  328,
      328,   79,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,   92,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  119,  328,  328,
      328,  129,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  159,  328,
      328,  328,  328,  328,  164,  328,  328,  328,  328,  328,

      180,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  210,  328,  328,  328,  328,  328,  328,
      219,  328,  328,  328,  328,  328,  328,  328,  226,  328,
      233,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  264,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  280,  328,  328,  328,  328,  328,
      328,    3,  328,  328,  328,  276,  328,   93,  328,  328,
      328,  176,  328,  328,  328,  328,  328,   14,  328,  328,

      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  303,    8,   10,  328,
      294,  293,  288,  333,  335,  334,  328,  328,  328,  328,
      300,  328,  328,  328,  328,   24,  328,   25,  328,   27,
      328,  328,   29,  328,  328,   32,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,   53,  328,  328,  328,  328,  328,  328,  328,
       65,  328,  328,  328,  328,   74,  328,   75,  328,   76,
      328,   81,  328,  328,  328,   85,  328,  328,  328,  328,
      328,  328,  328,  328,  328,   96,  328,  328,  328,  328,

      328,  328,  105,  328,  328,  328,  328,  328,  328,  328,
      245,  328,  221,  328,  119,  328,   21,  328,  328,  121,
      328,  328,  127,  328,  132,  328,  133,  328,  328,  328,
      136,  328,  138,  328,  328,  328,  142,  328,  328,  145,
      328,  146,  328,  149,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  167,  328,  328,  328,  328,
      328,  328,  328,  179,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  193,  328,  195,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      209,  328,  328,  328,  328,  328,  328,  220,  328,  328,

      222,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  240,  328,  241,  328,  243,
      328,  328,  328,  328,  328,  328,  290,  328,  328,  252,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  273,  328,  328,  328,  278,  328,
      328,  297,  281,  328,  328,  328,  328,   16,  328,  328,
      328,  328,  125,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,   66,  328,  328,  328,    6,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,

       33,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,   43,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  292,  328,   87,  328,   88,
      328,   90,  328,  328,   94,  328,  328,  328,   99,  328,
      100,  328,  328,  328,  328,  328,  130,  328,  328,  114,
      328,  116,  328,  328,  328,  328,  328,  328,  328,  135,
      328,  140,  328,  141,  328,  328,  328,  328,  328,  151,
      328,  328,  328,  155,  328,  328,  328,  161,  328,  328,
      328,  328,  328,  328,  328,  328,  177,  328,  181,  328,

      328,  328,  328,  328,  328,  188,  328,  328,  190,  328,
      191,  328,  192,  328,  194,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  206,  328,  197,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  234,  328,  328,  328,
      237,  328,  328,  328,  328,  328,  328,  248,  328,  328,
      328,  322,  328,  254,  328,  328,  328,  328,  328,  328,
      263,  328,  265,  328,  328,  328,  269,  328,  328,  328,
      328,  275,  328,  277,  328,  279,  328,  328,  328,  328,
      328,   30,  328,  328,  328,  328,  328,   77,  328,  328,

      249,  328,  274,  328,  328,   80,  328,  137,  328,   20,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  242,  328,  328,  328,  328,  328,   18,  328,  328,
       22,  328,  328,   31,  328,  328,  328,   35,  328,  328,
      328,  328,  328,  328,  328,  326,   42,  328,  328,   50,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,   64,  328,  328,  328,  328,   73,  328,   78,
      328,  328,   83,  328,  328,   90,  328,  328,  328,  328,
      102,  328,  328,  328,  328,  110,  328,  113,  328,  328,
      118,  328,  328,  328,  328,  328,  328,  328,  328,  328,

      328,  328,  328,  157,  328,  328,  328,  328,  328,  168,
      328,  328,  328,  173,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  199,  328,  200,  328,  328,  328,  328,
      204,  328,  205,  328,  208,  328,  211,  328,  213,  328,
      215,  328,  328,  328,  328,  223,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  258,  328,  328,  259,
      328,  328,  261,  328,  328,  328,  269,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,   89,  328,  328,   44,  328,  328,  207,  328,

      328,  328,  328,  328,  328,    4,  328,    7,  328,  328,
       19,  328,   28,  328,  328,   34,  328,   36,  328,  328,
       38,  328,  328,  328,   41,  328,   49,  328,  328,  328,
      328,  328,  328,  328,  328,  328,   60,  328,   61,  328,
       62,  328,   63,  328,  328,  328,  328,   82,  328,   86,
      328,  328,   95,  328,  328,  328,  328,  328,  328,  328,
      328,  126,  328,  134,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  162,  328,  328,  328,  328,
      328,  183,  328,  328,  328,  328,  187,  328,  328,  328,
      198,  328,  201,  328,  202,  328,  328,  212,  328,  328,

      328,  328,  328,  224,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  321,  328,  328,  328,  328,  328,
      328,  251,  328,  328,  291,  328,  328,  328,  328,  328,
      271,  328,  272,  328,  328,  328,  182,  328,  328,  216,
      328,  328,  328,  103,  328,  328,  328,  328,  139,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
       40,  328,  328,   51,  328,  328,  328,   54,  328,   56,
      328,  328,  328,  328,   67,  328,  328,   69,  328,  328,
       98,  328,  328,  328,  328,  328,  328,  328,  120,  328,
      328,  147,  328,  148,  328,  328,  328,  328,  328,  328,

      328,  328,  160,  328,  328,  163,  328,  172,  328,  328,
      328,  328,  328,  328,  328,  203,  328,  328,  328,  328,
      225,  328,  328,  328,  328,  328,  228,  328,  328,  235,
      328,  328,  328,  328,  328,  328,  246,  328,  250,  328,
      328,  260,  328,  266,  328,  267,  328,  328,  328,  328,
      283,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,   32,  328,   37,  328,  328,
      328,  328,  328,   52,  328,  323,  324,  328,  328,  328,
      328,  328,   91,  328,  328,  328,  328,  328,  328,  123,
      328,  143,  328,  328,  328,  153,  328,  328,  328,  328,

      328,  328,  184,  328,  185,  328,  186,  328,  189,  328,
      328,  328,  217,  328,  218,  328,  328,  328,  328,  328,
      328,  328,  328,  238,  328,  328,  244,  328,  253,  328,
      256,  328,  270,  328,  328,  328,  328,  325,  262,  328,
      328,  328,  328,  122,  328,   70,  328,  328,  328,  328,
      328,  328,   39,  328,  328,  328,  328,  328,   58,  328,
       59,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  152,  328,  154,  328,  328,  328,  328,   84,  174,
      328,  196,  328,  328,  328,  328,  328,  328,  229,  328,
      328,  239,  328,  328,  328,  282,  328,  115,  328,  328,

      328,  255,  328,  328,  328,  128,  328,  328,  328,  328,
      328,  328,  328,  328,   71,  328,  328,  328,  107,  328,
      108,  328,  117,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  327,    5,
      328,  328,  178,  328,  328,   45,  328,   46,  328,   48,
      328,  328,  328,  328,  328,  328,  150,  328,  328,  328,
      328,  171,  328,  328,  328,  328,  227,  328,  328,  328,
      271,  328,  328,  328,  328,  328,  328,   68,  328,  104,
      328,  328,  328,  328,  158,  328,  328,  328,  328,  328,
      328,  236,  328,  268,  328,  131,  328,  101,  328,   17,

      328,  328,  328,  328,  144,  328,  328,  328,  328,  230,
      328,  328,  328,  257,  328,   57,  328,  328,  328,  328,
      328,  328,  328,  328,  106,  328,  328,  328,  328,  328,
      232,  328,   47,  328,  328,  328,  328,  328,  156,  328,
      166,  328,  214,  328,  328,  231,  328
    } ;

static yyconst short int yy_accept[1495] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   12,   14,   17,   20,   22,   24,   27,
       30,   34,   37,   40,   43,   45,   48,   51,   54,   56,
       58,   61,   64,   67,   70,   73,   76,   79,   82,   85,
       88,   91,   94,   97,  100,  103,  106,  109,  112,  115,
      118,  121,  124,  127,  130,  133,  136,  139,  142,  146,
      149,  152,  155,  159,  162,  165,  168,  171,  174,  177,
      180,  183,  186,  189,  192,  194,  197,  198,  200,  203,
      206,  209,  212,  217,  218,  218,  219,  220,  220,  221,
      222,  222,  222,  223,  224,  224,  224,  225,  225,  226,

      227,  227,  228,  229,  230,  230,  230,  230,  231,  232,
      233,  234,  235,  236,  237,  237,  238,  238,  238,  238,
      239,  239,  240,  241,  242,  243,  245,  246,  246,  247,
      248,  249,  250,  252,  253,  254,  255,  256,  257,  258,
      259,  260,  261,  262,  263,  264,  265,  266,  267,  268,
      269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
      280,  281,  283,  285,  286,  287,  288,  289,  290,  291,
      292,  293,  294,  295,  296,  297,  298,  299,  301,  302,
      304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
      314,  315,  316,  317,  318,  319,  320,  321,  322,  323,

      324,  325,  326,  327,  328,  329,  331,  332,  333,  334,
      335,  336,  337,  338,  339,  340,  340,  341,  342,  343,
      344,  345,  346,  347,  348,  349,  350,  351,  353,  354,
      355,  356,  357,  358,  359,  360,  361,  363,  364,  365,
      367,  368,  369,  370,  371,  372,  373,  374,  375,  375,
      376,  376,  377,  378,  378,  378,  379,  379,  380,  380,
      380,  381,  381,  382,  383,  383,  384,  385,  386,  386,
      387,  387,  388,  389,  390,  390,  391,  391,  392,  392,
      393,  394,  396,  398,  399,  400,  402,  404,  406,  407,
      407,  408,  409,  410,  411,  413,  414,  415,  416,  417,

      418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
      429,  431,  432,  433,  434,  435,  436,  438,  439,  440,
      441,  442,  444,  445,  446,  447,  448,  449,  450,  451,
      452,  453,  455,  456,  457,  458,  459,  460,  461,  462,
      463,  464,  465,  466,  467,  468,  470,  471,  472,  474,
      475,  476,  477,  478,  479,  480,  481,  482,  483,  484,
      485,  486,  487,  488,  489,  491,  492,  493,  494,  495,
      497,  498,  499,  499,  500,  501,  503,  504,  505,  506,
      507,  508,  509,  510,  511,  512,  513,  514,  515,  516,
      517,  518,  519,  520,  521,  522,  523,  524,  526,  527,

      528,  529,  530,  531,  533,  534,  535,  536,  537,  538,
      539,  541,  543,  544,  545,  546,  547,  548,  549,  550,
      551,  552,  553,  554,  555,  556,  557,  558,  559,  560,
      561,  562,  563,  564,  565,  567,  568,  569,  570,  571,
      572,  573,  574,  575,  575,  577,  578,  579,  580,  581,
      582,  584,  585,  586,  588,  590,  591,  592,  594,  595,
      596,  597,  598,  600,  601,  602,  603,  604,  605,  606,
      607,  608,  609,  610,  611,  612,  613,  614,  615,  616,
      617,  617,  618,  618,  621,  621,  622,  622,  623,  623,
      624,  625,  626,  627,  628,  629,  630,  631,  632,  633,

      634,  635,  636,  638,  640,  642,  643,  645,  646,  648,
      649,  650,  651,  652,  653,  654,  655,  656,  657,  658,
      659,  660,  661,  662,  663,  665,  666,  667,  668,  669,
      670,  671,  673,  674,  675,  676,  678,  680,  682,  684,
      685,  686,  688,  689,  690,  691,  692,  693,  694,  695,
      696,  698,  699,  700,  701,  702,  703,  705,  706,  707,
      708,  709,  710,  711,  713,  715,  717,  719,  720,  722,
      723,  725,  727,  729,  730,  731,  733,  735,  736,  737,
      739,  740,  742,  744,  746,  747,  748,  749,  750,  751,
      752,  753,  754,  755,  756,  756,  758,  759,  760,  760,

      761,  762,  763,  764,  766,  767,  768,  769,  770,  771,
      772,  773,  774,  776,  778,  779,  780,  781,  782,  783,
      784,  785,  786,  787,  788,  789,  790,  791,  793,  794,
      795,  796,  797,  798,  800,  801,  803,  804,  805,  806,
      807,  808,  809,  810,  811,  812,  813,  814,  815,  816,
      818,  820,  822,  823,  824,  825,  826,  827,  829,  830,
      832,  833,  834,  835,  836,  837,  838,  839,  840,  841,
      842,  843,  844,  845,  847,  848,  849,  851,  852,  853,
      855,  856,  857,  858,  860,  861,  862,  863,  865,  866,
      867,  868,  869,  870,  871,  872,  873,  874,  875,  876,

      877,  878,  879,  880,  881,  882,  883,  884,  885,  886,
      888,  889,  889,  889,  889,  889,  890,  892,  893,  894,
      895,  896,  897,  898,  899,  900,  901,  903,  904,  905,
      906,  907,  908,  909,  910,  911,  912,  913,  915,  916,
      917,  918,  919,  920,  921,  922,  923,  924,  925,  926,
      927,  928,  929,  930,  931,  932,  933,  934,  935,  936,
      938,  940,  942,  944,  945,  947,  948,  949,  951,  953,
      954,  955,  956,  957,  959,  960,  962,  964,  965,  966,
      967,  968,  969,  970,  972,  974,  976,  977,  978,  979,
      980,  982,  983,  984,  986,  987,  988,  990,  991,  992,

      993,  993,  994,  995,  995,  996,  997,  999, 1001, 1002,
     1003, 1004, 1005, 1006, 1008, 1009, 1011, 1013, 1015, 1017,
     1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
     1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
     1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050,
     1051, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062,
     1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1075,
     1076, 1077, 1079, 1080, 1081, 1082, 1084, 1086, 1088, 1089,
     1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1100, 1101,
     1103, 1105, 1106, 1108, 1110, 1112, 1113, 1114, 1115, 1116,

     1117, 1118, 1119, 1120, 1121, 1122, 1124, 1125, 1126, 1127,
     1128, 1130, 1131, 1133, 1134, 1136, 1137, 1138, 1140, 1141,
     1142, 1143, 1144, 1145, 1146, 1147, 1149, 1150, 1152, 1153,
     1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163,
     1165, 1166, 1167, 1168, 1170, 1172, 1173, 1175, 1176, 1178,
     1179, 1180, 1181, 1183, 1184, 1185, 1186, 1188, 1190, 1191,
     1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
     1203, 1204, 1206, 1207, 1208, 1209, 1210, 1210, 1212, 1213,
     1213, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223,
     1224, 1226, 1228, 1229, 1230, 1231, 1233, 1235, 1237, 1239,

     1241, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252,
     1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
     1263, 1264, 1265, 1266, 1267, 1267, 1269, 1270, 1272, 1273,
     1275, 1276, 1277, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
     1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1296,
     1298, 1299, 1301, 1302, 1303, 1304, 1305, 1306, 1308, 1310,
     1311, 1313, 1315, 1316, 1318, 1320, 1321, 1323, 1324, 1325,
     1327, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
     1339, 1341, 1343, 1345, 1346, 1347, 1348, 1350, 1352, 1353,
     1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1364, 1366,

     1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
     1378, 1379, 1380, 1380, 1380, 1381, 1382, 1384, 1385, 1386,
     1387, 1389, 1390, 1391, 1393, 1395, 1397, 1398, 1400, 1401,
     1402, 1403, 1404, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
     1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
     1424, 1425, 1425, 1427, 1428, 1429, 1430, 1431, 1433, 1435,
     1436, 1437, 1439, 1440, 1442, 1443, 1444, 1446, 1447, 1448,
     1449, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
     1460, 1461, 1463, 1464, 1466, 1467, 1468, 1470, 1472, 1473,
     1474, 1475, 1477, 1478, 1480, 1481, 1483, 1484, 1485, 1486,

     1487, 1488, 1489, 1491, 1492, 1494, 1496, 1497, 1498, 1499,
     1500, 1501, 1502, 1503, 1505, 1506, 1508, 1508, 1508, 1510,
     1511, 1512, 1513, 1514, 1515, 1516, 1518, 1519, 1520, 1521,
     1523, 1524, 1525, 1526, 1527, 1529, 1530, 1532, 1533, 1534,
     1535, 1536, 1537, 1539, 1541, 1542, 1542, 1544, 1546, 1548,
     1549, 1550, 1551, 1553, 1554, 1555, 1556, 1557, 1558, 1559,
     1560, 1561, 1562, 1563, 1564, 1565, 1566, 1568, 1570, 1571,
     1572, 1573, 1574, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
     1583, 1585, 1586, 1587, 1588, 1589, 1590, 1592, 1594, 1595,
     1596, 1598, 1599, 1600, 1601, 1602, 1602, 1602, 1603, 1605,

     1607, 1609, 1611, 1612, 1613, 1615, 1617, 1618, 1619, 1620,
     1621, 1622, 1623, 1624, 1626, 1627, 1629, 1631, 1632, 1633,
     1635, 1636, 1637, 1638, 1639, 1641, 1642, 1643, 1644, 1646,
     1648, 1649, 1650, 1651, 1652, 1653, 1655, 1656, 1657, 1658,
     1659, 1661, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670,
     1671, 1672, 1674, 1676, 1677, 1678, 1679, 1680, 1680, 1682,
     1684, 1685, 1686, 1687, 1688, 1689, 1691, 1692, 1694, 1695,
     1696, 1698, 1700, 1701, 1702, 1704, 1705, 1706, 1708, 1709,
     1710, 1711, 1712, 1713, 1714, 1715, 1717, 1718, 1719, 1721,
     1723, 1725, 1726, 1727, 1728, 1729, 1730, 1730, 1731, 1732,

     1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1740, 1742,
     1743, 1745, 1746, 1748, 1750, 1752, 1753, 1754, 1755, 1756,
     1757, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
     1769, 1770, 1771, 1773, 1774, 1774, 1775, 1776, 1777, 1778,
     1780, 1782, 1783, 1784, 1785, 1787, 1788, 1789, 1790, 1791,
     1792, 1794, 1796, 1798, 1798, 1800, 1802, 1803, 1804, 1805,
     1807, 1808, 1809, 1810, 1812, 1813, 1814, 1815, 1816, 1818,
     1819, 1820, 1821, 1822, 1823, 1824, 1825, 1827, 1828, 1829,
     1830, 1831, 1833, 1835, 1836, 1837, 1838, 1839, 1841, 1843,
     1845, 1846, 1848, 1848

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,    8,   15,   16,   17,   18,   19,   20,
       21,   22,   21,   21,   21,   23,   21,   24,    8,   25,
       26,   27,    1,   28,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
        1,   29,    1,    8,   30,   31,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,    1,   58,    1,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   59,   60,   61,   62,   63,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   68,   68,   79,   80,   81,   82,   83,   84,   85,
       68,   86,   87,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   68,   68,   79,   80,   81,   82,   83,
       84,   85,   68,   86,   87
    } ;

static yyconst int yy_meta[88] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    5,    6,
        1,    1,    1,    1,    1,    7,    1,    4,    4,    4,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    4,
        8,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10
    } ;

static yyconst short int yy_base[1519] =
    {   0,
        0,    0,   85,   86,   99,  157,   64,   65, 2011, 2012,
     2012, 2012, 1984,  187,    0, 2012, 2000,  188, 1994,  118,
      182,   77,  190,  211, 1981,   66, 1979,  116,  189,  219,
      206,  214,  220,  231,  233,  249, 1956,  247,  259, 1958,
      108,  109,  254,  259,  267,  212, 1951,  281,  289,  306,
      192, 1970,  107,  143, 1965, 1964, 1941,    0,  275, 1935,
     1927, 1920,  290,  134, 1931, 1930, 1929, 1932,  209, 1932,
      152, 1917,  248, 2012, 2012, 1972, 2012,  190, 2012, 2012,
        0,  323,  299, 2012,  369, 2012, 1983,  374,    0, 2012,
        0,  354, 2012, 1977,  375, 1974,    0,  369,  390,  396,

      415, 2012,    0,  421,  132,  431,  440, 2012, 2012, 1958,
     2012, 2012, 2012, 2012, 1981,  376, 1980, 1979,  452, 2012,
     1978,    0, 1945,  195,  294, 1945, 1927,  178,  281,  217,
     1931, 1925,    0,  178,  267,  350,  298, 1926,  251,  445,
      346, 1922, 1927, 1938, 1921,  100, 1936,  380, 1926, 1917,
     1918, 1920,  300, 1919, 1921,  424, 1910, 1924, 1909,    0,
     1915,  452,    0, 1923, 1918, 1901, 1913,  391,  380,  446,
     1904, 1919,  318,  386, 1902,  454,  231,  328, 1901, 1916,
     1899, 1913, 1899,  468, 1898, 1906, 1900,  474, 1906, 1903,
      447, 1903,  486, 1895, 1908,  356,  348, 1896, 1895,  415,

     1904, 1903,  479, 1899,  421, 1883,  478,  503, 1898,  508,
     1898,  464,  431, 1880, 1890,  536, 1880, 1896, 1878, 2012,
      471, 1860, 1861,  322, 1860, 1836, 1845, 1850, 1853, 1855,
      488, 1845, 1848,  480, 1855, 1850,    0, 1831, 1838,  423,
     1853, 1845, 1835, 1845, 1846, 1823, 1833, 2012,  480, 1900,
      510,    0,  528,  536,  559,  571,  572,    0,  551,  575,
      576,  579, 2012,    0,  572,  591,    0,  597,  607,  548,
      616,  622,  628, 2012,  578, 2012,  593, 2012,  621, 2012,
     2012,    0, 1858, 1867, 1859,    0,    0,    0, 1855,  588,
     1854, 1845, 1858, 1865,    0, 1863, 1856, 1851,  563,  608,

     1859,  263, 1848,  621, 1846, 1858, 1839,  582,  622, 1858,
      627, 1855,  623, 1852, 1849, 1833,    0, 1850, 1835, 1842,
     1844,    0, 1835, 1846,  618, 1834, 1826, 1841, 1824, 1841,
     1829,  639, 1827, 1827, 1824, 1816, 1827, 1827, 1816, 1818,
     1827, 1822, 1825, 1808, 1823,  657, 1809, 1812, 1806, 1812,
      643, 1803, 1817, 1812, 1815, 1815,  484, 1811, 1801, 1817,
     1812, 1805, 1809, 1791, 1802, 1790, 1788, 1785, 1804,  679,
     1794,  650,  682, 1796, 1799,  651, 1785, 1782, 1798,  645,
     1797, 1792, 1795, 1790,  655, 1791, 1790, 1789, 1792,  656,
     1771, 1771, 1769, 1774, 1780, 1776, 1774, 1766, 1779, 1768,

     1777, 1762, 1779,    0, 1756, 1766, 1772, 1775, 1755, 1771,
      664,    0, 1755, 1771, 1752, 1758, 1753, 1755, 1747, 1752,
     1760, 1739, 1762, 1753,  657, 1756, 1745, 1744,  656, 1744,
     1742, 1747, 1754, 1747,    0, 1739, 1753, 1730,  672,  662,
     1738, 1741, 1728,  702,    0, 1729, 1731, 1695, 1698, 1699,
        0,  635, 1714,    0,    0, 1687, 1707,    0, 1684, 1689,
     1704, 1705,    0, 1703, 1698, 1700, 1690, 1699, 1697, 1699,
     1686, 1686, 1693, 1695,  656, 1677, 1691, 1690, 1691, 1676,
      704,  711,  714,    0,  722,  724,  703,  720,  736,  742,
     2012, 2012, 2012, 1696, 1700, 1692, 1717, 2012, 1697, 1709,

     1699, 1694,    0,    0,    0, 1710,    0, 1703, 1708, 1697,
     1706, 1693, 1700, 1695, 1698, 1682, 1692, 1695, 1679, 1678,
     1678, 1691, 1680, 1692,  572,  702, 1680, 1691, 1670, 1665,
     1669, 1670, 1669, 1677, 1673,    0,    0, 1675,    0, 1667,
     1662,    0, 1680, 1675, 1671, 1658, 1657, 1661, 1670, 1665,
        0, 1653, 1652, 1655, 1656, 1670, 1669, 1649, 1642, 1653,
     1646, 1643,  699,    0,    0,    0,    0,  728,    0, 1661,
        0,    0,    0, 1652, 1655,    0,    0, 1639, 1639,    0,
     1645,    0,  664,    0, 1640, 1647, 1633, 1641,  717, 1646,
     1643, 1632, 1631, 1623,  767,    0, 1642, 1628, 1624,  701,

     1626, 1625, 1633,    0, 1632,  735, 1639, 1621, 1633, 1632,
     1625, 1630, 1615,    0, 1615, 1608, 1630, 1617, 1628, 1627,
     1618, 1608, 1607, 1613, 1603, 1617, 1600,    0, 1607, 1605,
     1615, 1608, 1598,    0, 1603,    0, 1601, 1604, 1603,  739,
     1587, 1590, 1608, 1588, 1598, 1586, 1600, 1589, 1594,    0,
        0, 1583,  734, 1589, 1588, 1592, 1618,    0, 1576,    0,
     1582, 1574, 1579, 1590, 1585, 1571, 1585, 1582,  741, 1583,
     1578, 1578, 1576,    0, 1579, 1578,    0, 1577, 2012, 1582,
     1574, 1538, 1534,    0, 1533, 1548, 1540,    0, 1533, 1522,
     1539, 1533, 1534, 1541, 1519, 1519, 1533, 1518, 1532, 1510,

     1533, 1519, 1515, 1517, 1522, 1524, 1513, 1519, 1526,    0,
     1497,  773,  775,  769,  771, 1547,    0, 1525, 1541, 1544,
     1543, 1527, 1521, 1541, 1539, 1540,    0, 1522, 1527, 1526,
     1519, 1535, 1519, 1522, 1517, 1554, 1528,    0, 1518, 1513,
     1529,  751, 1520, 1513, 1518, 1521, 1524, 1506, 1511, 1517,
     1516, 1511, 1506, 1504, 1512, 1510, 1510, 1495, 1504,    0,
        0,    0,  764, 1489,    0, 1496, 1488,    0,    0, 1476,
     1457,  738, 1458,    0, 1454,    0,    0, 1430, 1417, 1419,
      740, 1393, 1389,    0,    0,    0, 1369, 1376, 1382, 1368,
        0, 1359, 1366,    0, 1365, 1360,    0, 1358, 1346, 1351,

     1329, 1334, 1339, 1320, 1312, 1306,    0,    0, 1307, 1289,
       60,  104,  191,    0,  218,    0,    0,    0,    0,  318,
      401,  482,  551,  691,  716,  735,  751,  749,  759,    0,
        0,  749,  765,  764,  754,  755,  775,  768,  773,  778,
      774,  772,  781,  770,  781,  784,  768,  778,  781,  771,
        0,  772,  777,  772,  779,  789,    0,  786,  791, 2012,
      783,  827,  795,  778,  791,  789,  799,    0,    0,  804,
      797,  788,  794,  808,  796,    0,    0,    0,  798,  803,
      780,  781,    0,  769,  780,  784,  782,    0,  774,    0,
        0,  787,    0,    0,    0,  785,  789,  782,  791,  779,

      793,  778,  778,  786,  789,    0,  799,  828,  828,  820,
        0,  821,    0,  831,    0,  817,  833,    0,  819,  831,
      821,  841,  822,  824, 2012,    0,  825,    0,  827,  843,
      827,  836,  829,  848,  849,  841,  849,  835,  852,    0,
      855,  849,  856,    0,    0,  856,    0,  847,    0,  854,
      850,  841,    0,  848,  858,  863,    0,    0,  860,    0,
      852,  866,  871,  868,  867,  866,  861,  853,  869,  877,
      871,  882,  877,  871,  864,  873,  878,    0,  885,  877,
      864,  890,  887,  884,  885,  886,  871,  877,  885,  895,
        0,    0,  896,  897,  900,    0,    0,    0,  885,  906,

        0,  897,  887,  894,    0,  897,  901,  904,  900,  912,
      909,  895,  902,  903,  910,  939,  919,  920,  921,  903,
      900,  911,  908,  923,  957,    0,  916,    0,  926,    0,
      912,  920,    0,  933,  917,  929,  922,  926,  906,  899,
      887,  896,  902,  911,  909,  901,  906,    0,  907,    0,
      914,    0,  910,  919,  917,  921,  913,    0,    0,  953,
        0,    0,  952,    0,    0,  944,    0,  951,  956,    0,
      963,  958,  960,  963,  961,  949,  950,  948,  955,    0,
        0,    0,    0,  966,  958,  953,    0,    0,  960,    0,
      955,  967,  974,  975,  959,  977,  969,    0,    0,  969,

      981,  964,  970,  974,  973,  984,  976,  978,  973,    0,
      988,  989,  976,  987,  993,  987,    0,  985,  987,  987,
        0,  985, 1001,    0,    0,    0,  985,    0,  993,  985,
      993,  989,    0, 1007, 1012, 1009, 1001,  998, 1010, 1007,
     1010,  998, 2012, 1005, 1002, 1001, 1009, 1003, 1017,    0,
     1020, 1014,    0, 1023, 1023, 1024, 1012, 1030,    0, 1018,
     1021,    0,  993,    0,  981, 1000,    0,  993,  992, 1003,
        0,  994,  988, 1001,  999, 1003,  996, 1028, 1029, 1034,
     1035,    0, 1046, 1032, 1072, 1073,    0,    0, 1039, 1035,
     1042,    0, 1048, 1040, 1052,    0, 1045, 1043, 1041, 1048,

     1055, 1045,    0, 1063,    0,    0, 1051, 1055, 1051, 1048,
     1053, 1065, 1070,    0, 1077,    0, 1057, 1075,    0, 1067,
     1066, 1074, 1068, 1078, 1079,    0, 1076, 1081, 1069,    0,
     1070, 1090, 1078, 1071,    0, 1078,    0, 1094, 1087, 1070,
     1091, 1081,    0,    0, 1094, 1087,    0,    0, 1081, 1076,
     1099, 1083,    0, 1071, 1125, 1050, 1065, 1078, 1063, 1056,
     1078, 1071, 1071, 1078, 1079, 1111,    0,    0, 1097, 1117,
     1110, 1101,    0, 2012, 2012, 1102, 1117, 1119, 1105, 1110,
        0, 1108, 1112, 1108, 1115, 1108,    0, 1112, 1123, 1131,
        0, 1114, 1132, 1133, 1117, 1119, 1138, 1115,    0,    0,

        0,    0, 1122, 1139,    0,    0, 1138, 1138, 1146, 1137,
     1140, 1138, 1169,    0, 1146,    0,    0, 2012, 1131,    0,
     1132, 1145, 1121, 2012,    0, 1125, 1114, 1103,    0,    0,
     1105, 1129, 1127, 1115, 1149,    0, 1143, 1151, 1160, 1161,
        0,    0, 1147, 1145, 1160, 1151, 1166, 1168, 1168, 1154,
     1155,    0,    0, 1158, 1162, 1163, 2012, 1159,    0,    0,
     1162, 1162, 1167, 1165, 1169,    0, 1170,    0, 1185, 1182,
        0,    0, 1160, 1209, 1219, 1159, 1165,    0, 1140, 1190,
     1191, 1192, 1180, 1196, 1191,    0, 1181, 1197,    0,    0,
        0, 1202, 1179, 1190, 1192, 1208, 1203, 1194, 1189, 1190,

     1207, 1199, 1205, 1202, 1198, 1171, 2012, 1247,    0, 1174,
        0, 1207,    0, 1203,    0, 1208, 1221, 1200, 1223, 1214,
        0, 1209, 1225, 1228, 2012, 1212, 1220, 1219, 1215,    0,
     1221, 1220,    0, 1183, 1193, 1185, 1220, 1221, 1228,    0,
        0, 1228, 1228, 1240,    0, 1237, 1242, 1228, 1245, 1229,
        0,    0,    0, 1218,    0,    0, 1251, 1249, 1240,    0,
     1252, 1242, 1254,    0, 1259, 1247, 2012, 1247,    0, 1257,
     1247, 1251, 1249, 1247, 1246, 1251,    0, 1254, 1254, 1256,
     1256,    0,    0, 1268, 1266, 1270, 1252,    0,    0,    0,
     1257,    0, 2012, 1308, 1318, 1328, 1338, 1344, 1354, 1362,

     1371, 1378, 1388, 1395, 1405, 1412, 1422, 1432, 1442, 1452,
     1462, 1472, 1482, 1492, 1502, 1512, 1522, 1532
    } ;

static yyconst short int yy_def[1519] =
    {   0,
     1493,    1, 1494, 1494, 1495, 1495,    1,    1, 1493, 1493,
     1493, 1493, 1493, 1496, 1497, 1493, 1498, 1499, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1500, 1501,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1493, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1493, 1493, 1493, 1493, 1503, 1493, 1493,
     1504, 1502, 1502, 1493, 1496, 1493, 1493, 1505, 1497, 1493,
     1506, 1499, 1493, 1493, 1507, 1493, 1508, 1493, 1493, 1493,

     1493, 1493, 1509, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1510, 1500, 1511, 1512, 1501, 1493,
     1513, 1502, 1502, 1502, 1502, 1502, 1502, 1493, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,

     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1493, 1502, 1502, 1502, 1493,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1493, 1503, 1493,
     1514, 1504, 1502, 1515, 1496, 1496, 1505, 1506, 1516, 1499,
     1499, 1507, 1493, 1508, 1493, 1493, 1509, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1510, 1493, 1511, 1493, 1512, 1493,
     1493, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1493,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,

     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1493, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,

     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1493, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1503, 1503, 1514, 1502, 1517, 1515, 1518, 1516, 1493, 1493,
     1493, 1493, 1493, 1502, 1502, 1502, 1502, 1493, 1502, 1502,

     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1493, 1502, 1502, 1502, 1493, 1502,

     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1493, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,

     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1515, 1517, 1516, 1518, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,

     1493, 1502, 1502, 1493, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1493,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,

     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1493, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1493, 1502, 1502, 1493,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,

     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1493, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,

     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1493, 1493, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1493, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1493, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,

     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1493, 1493, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1493, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1493, 1493, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1493, 1493, 1502, 1502, 1502,

     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1493, 1502, 1502,
     1502, 1502, 1502, 1493, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1493, 1493, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1493, 1502, 1502, 1502,

     1502, 1502, 1502, 1502, 1502, 1502, 1493, 1493, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1493, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1493, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1493, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1493, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502,    0, 1493, 1493, 1493, 1493, 1493, 1493, 1493,

     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493
    } ;

static yyconst short int yy_nxt[2100] =
    {   0,
       10,   11,   12,   13,   14,   15,   10,   16,   17,   18,
       19,   16,   16,   16,   20,   21,   22,   23,   24,   24,
       24,   24,   24,   25,   26,   27,   28,   29,   10,   10,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   58,
       59,   60,   61,   62,   58,   58,   63,   58,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   75,   75,  102,
      109,  110,  111,  103,  985,   82,   82,   76,   76,   10,

       10,   77,   10,   78,   10,   10,   10,   10,   10,   79,
       10,   80,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       83,   83,   97,   98,  322,   99,   99,   99,   99,   99,
       99,  113,  114,  166,  168,  213,  214,  167,  169,  270,
      270,  323,  216,  986,  170,  215,   10,   10,   10,   77,
       10,   78,   10,   10,   10,   10,   10,   79,   10,   80,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,  217,   86,
       93,   87,  233,  115,  250,  290,  290,   94,  117,  100,

      100,  100,  100,  100,  100,  104,  234,   99,   99,   99,
       99,   99,   99,  243,   10,   88,   95,  101,  251,  118,
      298,  120,  105,  128,  244,  106,  104,  299,   99,   99,
       99,   99,   99,   99,  121,  121,  208,  283,  209,  987,
      123,  210,  211,  183,  107,  284,  106,  121,  124,  129,
      125,  134,  988,  130,  293,  126,  131,  127,  135,  132,
      184,  294,  139,  185,  144,  136,  140,  295,  137,  133,
      141,  138,  239,  371,  372,  145,  142,  146,  157,  143,
      149,  240,  147,  241,  150,  171,  158,  148,  151,  172,
      175,  152,  159,  173,  153,  160,  161,  154,  300,  174,

      155,  309,  301,  162,  176,  511,  310,  246,  163,  164,
      177,  178,  187,  179,  512,  180,  188,  291,  181,  182,
      189,  247,  192,  190,  193,  285,  191,  194,  286,  373,
      373,  292,  195,  306,  196,  197,  198,  202,  199,  200,
      201,  203,  331,  307,  204,  205,  221,  222,  332,  287,
      223,  206,  363,  989,  207,  228,   93,  123,  224,  229,
      230,  231,  364,   94,  228,  124,  232,  253,  229,  230,
      231,   86,  126,   87,  127,  232,   86,   93,  256,  409,
     1493,  452,   95,  410,  261, 1493,  100,  100,  100,  100,
      100,  100,  302,  303,  304,  316,  453,   88,  317,  407,

      408,  305,  257,  262,  101,  104, 1493,   99,   99,   99,
       99,   99,   99,  100,  100,  100,  100,  100,  100,  325,
      365,  353,  351,  354,  355,  106,  326,  352,  265,  265,
      366,  101,  266,  266,  266,  266,  266,  266,  268,  268,
      268,  268,  268,  268,  271,  271,  413,  831,  272,  272,
      272,  272,  272,  272,  120,  335,  269,  273,  273,  273,
      273,  273,  273,  414,  421,  422,  440,  121,  121,  336,
      441,  273,  273,  273,  273,  273,  273,  356,  311,  357,
      121,  312,  281,  368,  250,  471,  341,  313,  342,  397,
      358,  359,  472,  473,  314,  315,  343,  344,  369,  360,

      398,  345,  346,  379,  370,  385,  438,  380,  251,  424,
      386,  387,  439,  381,  482,  581,  388,  425,  389,  400,
      390,  391,  417,  392,  393,  582,  394,  418,  401,  426,
      402,  990,  403,  419,  448,  427,  404,  428,  483,  434,
       87,  464,  429,  435,  430,  431,  460,  436,  449,  465,
      461,  466,  432,  444,  444,  444,  444,  444,  444,  285,
       94,   86,  484,   87,  485,  270,  270,  444,  444,  444,
      444,  444,  444,   86,   86,  486,  256,   93,   93,  487,
      276,   93,  491,  287,   94,  488,  991,   88,  261,  266,
      266,  266,  266,  266,  266,  278,  506,  498,  507,   88,

      257,  742,  492,   95,   95,  290,  290,  262,  266,  266,
      266,  266,  266,  266,  268,  268,  268,  268,  268,  268,
      489,  489,  743,  280,  490,  490,  490,  490,  490,  490,
      522,  523,  269,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  273,  273,  273,  273,  273,
      273,  493,  508,  524,  530,  514,  509,  525,  531,  273,
      273,  273,  273,  273,  273,  515,  527,  541,  542,  528,
      516,  517,  549,  518,  550,  564,  565,  574,  566,  567,
      595,  595,  597,  373,  373,  598,  602,  603,  607,  613,
      608,  619,  568,  640,  656,  575,  788,  614,  620,  641,

      657,  661,  569,  662,  671,  672,  674,  685,  250,  686,
      675,  679,  488,  642,  789,  482,  599,  643,  482,  444,
      444,  444,  444,  444,  444,  705,  486,  673,  486,  488,
      706,  715,  251,  444,  444,  444,  444,  444,  444,  251,
      744,  992,  483,  778,  805,  745,  806,  779,  487,  993,
      713,  746,  485,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  780,  794,  795,  595,  595,
      811,  842,  843,  855,  812,  870,  781,   87,   94,  486,
      488,  955,  930,  994,  856,  949,  944,  956,  844,  962,
      995,  871,  963,  996,  997,  998,  999,  487, 1000,  715,

      931,  485,  801,  713, 1001, 1002, 1003, 1004, 1005, 1006,
     1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
     1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1025,
     1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
     1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
     1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
     1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
     1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
     1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
     1087, 1088, 1078, 1089, 1090, 1091, 1092, 1093, 1094, 1095,

      566, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
     1107, 1108, 1109, 1110, 1111, 1112, 1105, 1113, 1080, 1114,
     1115, 1116, 1117, 1118, 1119, 1120, 1121, 1106, 1122, 1123,
     1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
     1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
     1145, 1146, 1147,  564, 1148, 1149, 1150, 1151, 1025, 1025,
     1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
     1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1144, 1171,
     1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1152, 1180,
     1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,

     1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1201,
     1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1199, 1210,
     1211, 1212, 1214, 1215, 1216, 1217, 1218, 1213, 1219, 1220,
     1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,  565,
     1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
     1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
     1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
     1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269,
     1270, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
     1282, 1283, 1284, 1285, 1286, 1287, 1271, 1272, 1288, 1289,

     1290, 1291, 1292, 1291, 1293, 1294, 1295, 1296, 1297, 1298,
     1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
     1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
     1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
     1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
     1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
     1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
     1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1143,
     1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
     1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,

     1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
     1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
     1408, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
     1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
     1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1408, 1408,
     1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
     1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
     1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
     1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
     1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,

     1486, 1487, 1488, 1489, 1490, 1491, 1492, 1435,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   89,  984,
       89,   89,   89,   89,   89,   89,   89,   89,   91,  983,
      982,  981,   91,   91,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,  116,  116,  980,  116,  116,  116,
      116,  119,  119,  119,  119,  119,  119,  119,  979,  119,
      119,  122,  978,  977,  976,  975,  122,  122,  249,  974,
      249,  249,  249,  249,  249,  249,  249,  249,  252,  973,

      972,  971,  970,  252,  252,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  258,  969,  968,  967,  966,
      258,  258,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  264,  965,  264,  264,  264,  264,  264,  264,
      264,  264,  267,  964,  267,  267,  267,  267,  267,  267,
      267,  267,  275,  275,  961,  275,  275,  275,  275,  275,
      275,  275,  277,  277,  277,  277,  277,  960,  277,  277,
      277,  277,  279,  279,  279,  279,  279,  279,  279,  959,
      279,  279,  121,  121,  121,  121,  121,  121,  121,  958,
      121,  121,  481,  957,  481,  481,  481,  481,  481,  481,

      481,  481,  254,  954,  254,  254,  254,  254,  254,  254,
      254,  254,  259,  953,  259,  259,  259,  259,  259,  259,
      259,  259,  712,  952,  712,  712,  712,  712,  712,  712,
      712,  712,  714,  951,  714,  714,  714,  714,  714,  714,
      714,  714,  950,  948,  947,  946,  945,  944,  943,  942,
      941,  940,  939,  938,  937,  936,  935,  934,  933,  932,
      929,  928,  927,  926,  925,  924,  923,  922,  921,  920,
      919,  918,  917,  916,  915,  914,  913,  567,  912,  911,
      910,  909,  908,  907,  906,  905,  904,  903,  902,  901,
      900,  899,  898,  897,  896,  895,  894,  893,  892,  891,

      890,  889,  888,  887,  886,  885,  884,  883,  882,  881,
      880,  879,  878,  877,  876,  875,  874,  873,  872,  869,
      868,  867,  866,  865,  864,  863,  862,  861,  860,  859,
      858,  857,  854,  853,  852,  851,  850,  849,  848,  847,
      846,  845,  841,  840,  839,  838,  837,  836,  835,  834,
      833,  832,  831,  830,  829,  828,  827,  826,  825,  824,
      823,  822,  821,  820,  819,  818,  817,  816,  815,  814,
      813,  810,  809,  808,  807,  804,  803,  802,  800,  799,
      798,  797,  796,  793,  792,  791,  790,  787,  786,  785,
      784,  783,  782,  777,  776,  775,  774,  773,  772,  771,

      770,  769,  768,  767,  766,  765,  764,  763,  762,  761,
      760,  759,  758,  757,  756,  755,  754,  753,  752,  751,
      750,  749,  748,  747,  741,  740,  739,  738,  737,  736,
      735,  734,  733,  732,  731,  730,  729,  728,  727,  726,
      725,  724,  723,  722,  721,  720,  719,  718,  717,  716,
      711,  710,  709,  708,  707,  704,  703,  702,  701,  700,
      699,  698,  697,  696,  695,  694,  693,  692,  691,  690,
      689,  688,  687,  684,  683,  682,  681,  680,  678,  677,
      676,  670,  669,  668,  667,  666,  665,  664,  663,  660,
      659,  658,  655,  654,  653,  652,  651,  650,  649,  648,

      647,  646,  645,  644,  639,  638,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  628,  627,  626,  625,  624,
      623,  622,  621,  618,  617,  616,  615,  612,  611,  610,
      609,  606,  605,  604,  601,  600,  596,  594,  593,  592,
      591,  590,  589,  588,  587,  586,  585,  584,  583,  580,
      579,  578,  577,  576,  573,  572,  571,  570,  563,  562,
      561,  560,  559,  558,  557,  556,  555,  554,  553,  552,
      551,  548,  547,  546,  545,  544,  543,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  529,  526,  521,  520,
      519,  513,  510,  505,  504,  503,  502,  501,  500,  499,

      497,  496,  495,  494,  249,  480,  479,  478,  477,  476,
      475,  474,  470,  469,  468,  467,  463,  462,  459,  458,
      457,  456,  455,  454,  451,  450,  447,  446,  445,  443,
      442,  437,  433,  423,  420,  416,  415,  412,  411,  406,
      405,  399,  396,  395,  384,  383,  382,  378,  377,  376,
      375,  374,  367,  362,  361,  350,  349,  348,  347,  340,
      339,  338,  337,  334,  333,  330,  329,  328,  327,  324,
      321,  320,  319,  318,  308,  297,  296,  289,  288,  282,
      120,  280,  278,  276,  274,  263,  259,  254,  248,  245,
      242,  238,  237,  236,  235,  227,  226,  225,  220,  219,

      218,  212,  186,  165,  156,  112,  108,   96,   90,   84,
     1493,    9, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493

    } ;

static yyconst short int yy_chk[2100] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,   22,
       26,   26,   26,   22,  811,    7,    8,    3,    4,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        7,    8,   20,   20,  146,   20,   20,   20,   20,   20,
       20,   28,   28,   41,   42,   53,   53,   41,   42,  105,
      105,  146,   54,  812,   42,   53,    5,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,   54,   14,
       18,   14,   64,   29,   78,  128,  128,   18,   29,   21,

       21,   21,   21,   21,   21,   23,   64,   23,   23,   23,
       23,   23,   23,   71,    6,   14,   18,   21,   78,   29,
      134,   30,   23,   32,   71,   23,   24,  134,   24,   24,
       24,   24,   24,   24,   30,   30,   51,  124,   51,  813,
       31,   51,   51,   46,   23,  124,   24,   30,   31,   32,
       31,   33,  815,   32,  130,   31,   32,   31,   33,   32,
       46,  130,   34,   46,   35,   33,   34,  130,   33,   32,
       34,   33,   69,  177,  177,   35,   34,   35,   38,   34,
       36,   69,   35,   69,   36,   43,   38,   35,   36,   43,
       44,   36,   38,   43,   36,   39,   39,   36,  135,   43,

       36,  139,  135,   39,   44,  302,  139,   73,   39,   39,
       44,   45,   48,   45,  302,   45,   48,  129,   45,   45,
       48,   73,   49,   48,   49,  125,   48,   49,  125,  178,
      178,  129,   49,  137,   49,   49,   49,   50,   49,   49,
       49,   50,  153,  137,   50,   50,   59,   59,  153,  125,
       59,   50,  173,  820,   50,   63,   92,   82,   59,   63,
       63,   63,  173,   92,   83,   82,   63,   82,   83,   83,
       83,   85,   82,   85,   82,   83,   88,   95,   88,  197,
      116,  224,   92,  197,   95,  116,   98,   98,   98,   98,
       98,   98,  136,  136,  136,  141,  224,   85,  141,  196,

      196,  136,   88,   95,   98,   99,  116,   99,   99,   99,
       99,   99,   99,  100,  100,  100,  100,  100,  100,  148,
      174,  169,  168,  169,  169,   99,  148,  168,  101,  101,
      174,  100,  101,  101,  101,  101,  101,  101,  104,  104,
      104,  104,  104,  104,  106,  106,  200,  821,  106,  106,
      106,  106,  106,  106,  119,  156,  104,  107,  107,  107,
      107,  107,  107,  200,  205,  205,  213,  119,  119,  156,
      213,  107,  107,  107,  107,  107,  107,  170,  140,  170,
      119,  140,  119,  176,  249,  240,  162,  140,  162,  191,
      170,  170,  240,  240,  140,  140,  162,  162,  176,  170,

      191,  162,  162,  184,  176,  188,  212,  184,  249,  207,
      188,  188,  212,  184,  251,  357,  188,  207,  188,  193,
      188,  188,  203,  188,  188,  357,  188,  203,  193,  207,
      193,  822,  193,  203,  221,  208,  193,  208,  251,  210,
      254,  234,  208,  210,  208,  208,  231,  210,  221,  234,
      231,  234,  208,  216,  216,  216,  216,  216,  216,  253,
      259,  255,  253,  255,  254,  270,  270,  216,  216,  216,
      216,  216,  216,  256,  257,  256,  257,  260,  261,  259,
      275,  262,  275,  253,  260,  261,  823,  255,  262,  265,
      265,  265,  265,  265,  265,  277,  299,  290,  299,  256,

      257,  525,  277,  260,  261,  290,  290,  262,  266,  266,
      266,  266,  266,  266,  268,  268,  268,  268,  268,  268,
      269,  269,  525,  279,  269,  269,  269,  269,  269,  269,
      308,  308,  268,  271,  271,  271,  271,  271,  271,  272,
      272,  272,  272,  272,  272,  273,  273,  273,  273,  273,
      273,  279,  300,  309,  313,  304,  300,  309,  313,  273,
      273,  273,  273,  273,  273,  304,  311,  325,  325,  311,
      304,  304,  332,  304,  332,  346,  346,  351,  346,  346,
      370,  370,  372,  373,  373,  372,  376,  376,  380,  385,
      380,  390,  346,  411,  425,  351,  583,  385,  390,  411,

      425,  429,  346,  429,  439,  439,  440,  452,  481,  452,
      440,  444,  487,  411,  583,  482,  373,  411,  483,  444,
      444,  444,  444,  444,  444,  475,  485,  439,  486,  488,
      475,  487,  481,  444,  444,  444,  444,  444,  444,  482,
      526,  824,  483,  563,  600,  526,  600,  563,  488,  825,
      485,  526,  486,  489,  489,  489,  489,  489,  489,  490,
      490,  490,  490,  490,  490,  568,  589,  589,  595,  595,
      606,  640,  640,  653,  606,  669,  568,  712,  714,  713,
      715,  772,  742,  826,  653,  763,  763,  772,  640,  781,
      827,  669,  781,  828,  829,  832,  833,  714,  834,  715,

      742,  712,  595,  713,  835,  836,  837,  838,  839,  840,
      841,  842,  843,  844,  845,  846,  847,  848,  849,  850,
      852,  853,  854,  855,  856,  858,  859,  861,  862,  862,
      863,  864,  865,  866,  867,  870,  871,  872,  873,  874,
      875,  879,  880,  881,  882,  884,  885,  886,  887,  889,
      892,  896,  897,  898,  899,  900,  901,  902,  903,  904,
      905,  907,  908,  909,  910,  912,  914,  916,  917,  919,
      920,  921,  922,  923,  924,  927,  929,  930,  931,  932,
      933,  934,  935,  936,  937,  938,  939,  941,  942,  943,
      946,  948,  934,  950,  951,  952,  954,  955,  956,  959,

      961,  962,  963,  964,  965,  966,  967,  968,  969,  970,
      971,  972,  973,  974,  975,  976,  970,  977,  979,  980,
      981,  982,  983,  984,  985,  986,  987,  970,  988,  989,
      990,  993,  994,  995,  999, 1000, 1002, 1003, 1004, 1006,
     1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
     1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1025,
     1027, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039,
     1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1016, 1049,
     1051, 1053, 1054, 1055, 1056, 1057, 1060, 1063, 1025, 1066,
     1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,

     1079, 1084, 1085, 1086, 1089, 1091, 1092, 1093, 1094, 1095,
     1096, 1097, 1100, 1101, 1102, 1103, 1104, 1105, 1093, 1106,
     1107, 1108, 1109, 1111, 1112, 1113, 1114, 1108, 1115, 1116,
     1118, 1119, 1120, 1122, 1123, 1127, 1129, 1130, 1131, 1132,
     1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144,
     1145, 1146, 1147, 1148, 1149, 1151, 1152, 1154, 1155, 1156,
     1157, 1158, 1160, 1161, 1163, 1165, 1166, 1168, 1169, 1170,
     1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
     1183, 1184, 1185, 1186, 1189, 1190, 1191, 1193, 1194, 1195,
     1197, 1198, 1199, 1200, 1201, 1202, 1183, 1183, 1204, 1207,

     1208, 1209, 1210, 1211, 1212, 1213, 1215, 1217, 1218, 1220,
     1221, 1222, 1223, 1224, 1225, 1227, 1228, 1229, 1231, 1232,
     1233, 1234, 1236, 1238, 1239, 1240, 1241, 1242, 1245, 1246,
     1249, 1250, 1251, 1252, 1254, 1255, 1256, 1257, 1258, 1259,
     1260, 1261, 1262, 1263, 1264, 1265, 1266, 1269, 1270, 1271,
     1272, 1276, 1277, 1278, 1279, 1280, 1282, 1283, 1284, 1285,
     1286, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1297,
     1298, 1303, 1304, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
     1315, 1319, 1321, 1322, 1323, 1326, 1327, 1328, 1331, 1332,
     1333, 1334, 1335, 1337, 1338, 1339, 1340, 1343, 1344, 1345,

     1346, 1347, 1348, 1349, 1350, 1351, 1354, 1355, 1356, 1358,
     1361, 1362, 1363, 1364, 1365, 1367, 1369, 1370, 1373, 1374,
     1375, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1383, 1384,
     1385, 1387, 1388, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
     1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1408, 1408,
     1410, 1412, 1414, 1416, 1417, 1418, 1419, 1420, 1422, 1423,
     1424, 1426, 1427, 1428, 1429, 1431, 1432, 1434, 1435, 1436,
     1437, 1438, 1439, 1442, 1443, 1444, 1446, 1447, 1448, 1449,
     1450, 1454, 1457, 1458, 1459, 1461, 1462, 1463, 1465, 1466,
     1468, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1478, 1479,

     1480, 1481, 1484, 1485, 1486, 1487, 1491, 1408, 1494, 1494,
     1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1497,  810,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1498,  809,
      806,  805, 1498, 1498, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1500, 1500,  804, 1500, 1500, 1500,
     1500, 1501, 1501, 1501, 1501, 1501, 1501, 1501,  803, 1501,
     1501, 1502,  802,  801,  800,  799, 1502, 1502, 1503,  798,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1504,  796,

      795,  793,  792, 1504, 1504, 1505, 1505, 1505, 1505, 1505,
     1505, 1505, 1505, 1505, 1505, 1506,  790,  789,  788,  787,
     1506, 1506, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1508,  783, 1508, 1508, 1508, 1508, 1508, 1508,
     1508, 1508, 1509,  782, 1509, 1509, 1509, 1509, 1509, 1509,
     1509, 1509, 1510, 1510,  780, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1511, 1511, 1511, 1511, 1511,  779, 1511, 1511,
     1511, 1511, 1512, 1512, 1512, 1512, 1512, 1512, 1512,  778,
     1512, 1512, 1513, 1513, 1513, 1513, 1513, 1513, 1513,  775,
     1513, 1513, 1514,  773, 1514, 1514, 1514, 1514, 1514, 1514,

     1514, 1514, 1515,  771, 1515, 1515, 1515, 1515, 1515, 1515,
     1515, 1515, 1516,  770, 1516, 1516, 1516, 1516, 1516, 1516,
     1516, 1516, 1517,  767, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1518,  766, 1518, 1518, 1518, 1518, 1518, 1518,
     1518, 1518,  764,  759,  758,  757,  756,  755,  754,  753,
      752,  751,  750,  749,  748,  747,  746,  745,  744,  743,
      741,  740,  739,  737,  736,  735,  734,  733,  732,  731,
      730,  729,  728,  726,  725,  724,  723,  722,  721,  720,
      719,  718,  716,  711,  709,  708,  707,  706,  705,  704,
      703,  702,  701,  700,  699,  698,  697,  696,  695,  694,

      693,  692,  691,  690,  689,  687,  686,  685,  683,  682,
      681,  680,  678,  676,  675,  673,  672,  671,  670,  668,
      667,  666,  665,  664,  663,  662,  661,  659,  657,  656,
      655,  654,  652,  649,  648,  647,  646,  645,  644,  643,
      642,  641,  639,  638,  637,  635,  633,  632,  631,  630,
      629,  627,  626,  625,  624,  623,  622,  621,  620,  619,
      618,  617,  616,  615,  613,  612,  611,  610,  609,  608,
      607,  605,  603,  602,  601,  599,  598,  597,  594,  593,
      592,  591,  590,  588,  587,  586,  585,  581,  579,  578,
      575,  574,  570,  562,  561,  560,  559,  558,  557,  556,

      555,  554,  553,  552,  550,  549,  548,  547,  546,  545,
      544,  543,  541,  540,  538,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  524,  523,  522,  521,  520,  519,
      518,  517,  516,  515,  514,  513,  512,  511,  510,  509,
      508,  506,  502,  501,  500,  499,  497,  496,  495,  494,
      480,  479,  478,  477,  476,  474,  473,  472,  471,  470,
      469,  468,  467,  466,  465,  464,  462,  461,  460,  459,
      457,  456,  453,  450,  449,  448,  447,  446,  443,  442,
      441,  438,  437,  436,  434,  433,  432,  431,  430,  428,
      427,  426,  424,  423,  422,  421,  420,  419,  418,  417,

      416,  415,  414,  413,  410,  409,  408,  407,  406,  405,
      403,  402,  401,  400,  399,  398,  397,  396,  395,  394,
      393,  392,  391,  389,  388,  387,  386,  384,  383,  382,
      381,  379,  378,  377,  375,  374,  371,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  358,  356,
      355,  354,  353,  352,  350,  349,  348,  347,  345,  344,
      343,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      333,  331,  330,  329,  328,  327,  326,  324,  323,  321,
      320,  319,  318,  316,  315,  314,  312,  310,  307,  306,
      305,  303,  301,  298,  297,  296,  294,  293,  292,  291,

      289,  285,  284,  283,  250,  247,  246,  245,  244,  243,
      242,  241,  239,  238,  236,  235,  233,  232,  230,  229,
      228,  227,  226,  225,  223,  222,  219,  218,  217,  215,
      214,  211,  209,  206,  204,  202,  201,  199,  198,  195,
      194,  192,  190,  189,  187,  186,  185,  183,  182,  181,
      180,  179,  175,  172,  171,  167,  166,  165,  164,  161,
      159,  158,  157,  155,  154,  152,  151,  150,  149,  147,
      145,  144,  143,  142,  138,  132,  131,  127,  126,  123,
      121,  118,  117,  115,  110,   96,   94,   87,   76,   72,
       70,   68,   67,   66,   65,   62,   61,   60,   57,   56,

       55,   52,   47,   40,   37,   27,   25,   19,   17,   13,
        9, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493

    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "us/1csql/1csql.l"
#define INITIAL 0
/* Companion source code for "flex & bison", published by O'Reilly
 * Media, ISBN 978-0-596-15597-1
 * Copyright (c) 2009, Taughannock Networks. All rights reserved.
 * See the README file for license conditions and contact info.
 * $Header: /home/johnl/flnb/code/sql/RCS/pmysql.l,v 2.1 2009/11/08 02:53:39 johnl Exp $
 */
/*
 * Scanner for mysql subset
 */
#line 14 "us/1csql/1csql.l"
#include "1csql.tab.h"
#include "1csql.h"
#include "CAst.h"
#include <stdarg.h>
#include <string.h>
#include <stdio.h>
#include <vector>

void yyerror(char *s, ...);

std::vector<int> oldstate;

#define COMMENT 1
#define DOT_NAME 2

#define BTWMODE 3

#line 1572 "us\\1csql\\1csql.lex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 31 "us/1csql/1csql.l"


  /* keywords */

#line 1728 "us\\1csql\\1csql.lex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1494 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2012 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 35 "us/1csql/1csql.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 36 "us/1csql/1csql.l"
{ return ALL; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 37 "us/1csql/1csql.l"
{ return ALL; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 38 "us/1csql/1csql.l"
{ return ALLOWED; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 39 "us/1csql/1csql.l"
{ return ALLOWED; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 40 "us/1csql/1csql.l"
{ return ALTER; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 41 "us/1csql/1csql.l"
{ return ANALYZE; }
	YY_BREAK
/* Hack for BETWEEN ... AND ... 
   * return special AND token if BETWEEN seen
   */
case 8:
YY_RULE_SETUP
#line 46 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); return AND; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 47 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); return AND; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 48 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return ANDOP; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 49 "us/1csql/1csql.l"
{ yylval.strval = strdup("and"); return ANDOP; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 50 "us/1csql/1csql.l"
{ return ANY; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 51 "us/1csql/1csql.l"
{ return AS; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 52 "us/1csql/1csql.l"
{ return AS; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 53 "us/1csql/1csql.l"
{ return ASC; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 54 "us/1csql/1csql.l"
{ return ASC; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 55 "us/1csql/1csql.l"
{ return AUTO_INCREMENT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 56 "us/1csql/1csql.l"
{ return BEFORE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 57 "us/1csql/1csql.l"
{ oldstate.push_back(YY_START); BEGIN BTWMODE; return BETWEEN; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 58 "us/1csql/1csql.l"
{ oldstate.push_back(YY_START); BEGIN BTWMODE; return BETWEEN; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 59 "us/1csql/1csql.l"
{ return BIGINT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 60 "us/1csql/1csql.l"
{ return BINARY; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 61 "us/1csql/1csql.l"
{ return BIT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 62 "us/1csql/1csql.l"
{ return BLOB; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 63 "us/1csql/1csql.l"
{ return BOTH; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 64 "us/1csql/1csql.l"
{ return BY; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 65 "us/1csql/1csql.l"
{ return CALL; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 66 "us/1csql/1csql.l"
{ return CASCADE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 67 "us/1csql/1csql.l"
{ return CASE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 68 "us/1csql/1csql.l"
{ return CASE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 69 "us/1csql/1csql.l"
{ return CHANGE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 70 "us/1csql/1csql.l"
{ return CHAR; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 71 "us/1csql/1csql.l"
{ return CHECK; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 72 "us/1csql/1csql.l"
{ return COLLATE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 73 "us/1csql/1csql.l"
{ return COLUMN; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 74 "us/1csql/1csql.l"
{ return COMMENT; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 75 "us/1csql/1csql.l"
{ return CONDITION; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 76 "us/1csql/1csql.l"
{ return CONNECT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 77 "us/1csql/1csql.l"
{ return CONSTRAINT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 78 "us/1csql/1csql.l"
{ return CONTINUE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 79 "us/1csql/1csql.l"
{ return CONVERT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 80 "us/1csql/1csql.l"
{ return CREATE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 81 "us/1csql/1csql.l"
{ return CROSS; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 82 "us/1csql/1csql.l"
{ return CROSS; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 83 "us/1csql/1csql.l"
{ return CURRENT_DATE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 84 "us/1csql/1csql.l"
{ return CURRENT_TIME; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 85 "us/1csql/1csql.l"
{ return CURRENT_TIMESTAMP; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 86 "us/1csql/1csql.l"
{ return CURRENT_USER; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 87 "us/1csql/1csql.l"
{ return CURRENT; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 88 "us/1csql/1csql.l"
{ return CURSOR; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 89 "us/1csql/1csql.l"
{ return DATABASE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 90 "us/1csql/1csql.l"
{ return DATABASES; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 91 "us/1csql/1csql.l"
{ return DATE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 92 "us/1csql/1csql.l"
{ return DATETIME; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 93 "us/1csql/1csql.l"
{ return DAY; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 94 "us/1csql/1csql.l"
{ return DAY_HOUR; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 95 "us/1csql/1csql.l"
{ return DAY_MICROSECOND; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 96 "us/1csql/1csql.l"
{ return DAY_MINUTE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 97 "us/1csql/1csql.l"
{ return DAY_SECOND; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 98 "us/1csql/1csql.l"
{ return DECIMAL; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 99 "us/1csql/1csql.l"
{ return DECLARE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 100 "us/1csql/1csql.l"
{ return DEFAULT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 101 "us/1csql/1csql.l"
{ return DELAYED; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 102 "us/1csql/1csql.l"
{ return DELETE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 103 "us/1csql/1csql.l"
{ return DESC; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 104 "us/1csql/1csql.l"
{ return DESC; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 105 "us/1csql/1csql.l"
{ return DESCRIBE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 106 "us/1csql/1csql.l"
{ return DETERMINISTIC; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 107 "us/1csql/1csql.l"
{ return DISTINCT; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 108 "us/1csql/1csql.l"
{ return DISTINCT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 109 "us/1csql/1csql.l"
{ return DISTINCTROW; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 110 "us/1csql/1csql.l"
{ return DIV; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 111 "us/1csql/1csql.l"
{ return DOUBLE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 112 "us/1csql/1csql.l"
{ return DROP; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 113 "us/1csql/1csql.l"
{ return EACH; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 114 "us/1csql/1csql.l"
{ return ELSE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 115 "us/1csql/1csql.l"
{ return ELSE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 116 "us/1csql/1csql.l"
{ return ELSEIF; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 117 "us/1csql/1csql.l"
{ return END; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 118 "us/1csql/1csql.l"
{ return END; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 119 "us/1csql/1csql.l"
{ return ENUM; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 120 "us/1csql/1csql.l"
{ return ESCAPED; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 121 "us/1csql/1csql.l"
{ yylval.subtok = 0; return EXISTS; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 122 "us/1csql/1csql.l"
{ yylval.subtok = 1; return EXISTS; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 123 "us/1csql/1csql.l"
{ return EXIT; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 124 "us/1csql/1csql.l"
{ return EXPLAIN; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 125 "us/1csql/1csql.l"
{ return FETCH; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 126 "us/1csql/1csql.l"
{ return FIRST; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 127 "us/1csql/1csql.l"
{ return FIRST; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 128 "us/1csql/1csql.l"
{ return FLOAT; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 129 "us/1csql/1csql.l"
{ return FOLLOWING; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 130 "us/1csql/1csql.l"
{ return FOR; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 131 "us/1csql/1csql.l"
{ return FOR; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 132 "us/1csql/1csql.l"
{ return FORCE; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 133 "us/1csql/1csql.l"
{ return FOREIGN; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 134 "us/1csql/1csql.l"
{ return FROM; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 135 "us/1csql/1csql.l"
{ return FROM; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 136 "us/1csql/1csql.l"
{ return FULLTEXT; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 137 "us/1csql/1csql.l"
{ return GRANT; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 138 "us/1csql/1csql.l"
{ return GROUP; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 139 "us/1csql/1csql.l"
{ return GROUP; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 140 "us/1csql/1csql.l"
{ return HAVING; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 141 "us/1csql/1csql.l"
{ return HAVING; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 142 "us/1csql/1csql.l"
{ return HIGH_PRIORITY; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 143 "us/1csql/1csql.l"
{ return HOUR; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 144 "us/1csql/1csql.l"
{ return HOUR_MICROSECOND; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 145 "us/1csql/1csql.l"
{ return HOUR_MINUTE; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 146 "us/1csql/1csql.l"
{ return HOUR_SECOND; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 147 "us/1csql/1csql.l"
{ return IF; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 148 "us/1csql/1csql.l"
{ return IGNORE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 149 "us/1csql/1csql.l"
{ return IN; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 150 "us/1csql/1csql.l"
{ return IN; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 151 "us/1csql/1csql.l"
{ return INFILE; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 152 "us/1csql/1csql.l"
{ return INNER; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 153 "us/1csql/1csql.l"
{ return INNER; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 154 "us/1csql/1csql.l"
{ return INOUT; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 155 "us/1csql/1csql.l"
{ return INSENSITIVE; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 156 "us/1csql/1csql.l"
{ return INSERT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 157 "us/1csql/1csql.l"
{ return INTEGER; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 158 "us/1csql/1csql.l"
{ return INTERVAL; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 159 "us/1csql/1csql.l"
{ return INTO; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 160 "us/1csql/1csql.l"
{ return INTO; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 161 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return UNION; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 162 "us/1csql/1csql.l"
{ return IS; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 163 "us/1csql/1csql.l"
{ return IS; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 164 "us/1csql/1csql.l"
{ return ITERATE; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 165 "us/1csql/1csql.l"
{ return JOIN; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 166 "us/1csql/1csql.l"
{ return JOIN; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 167 "us/1csql/1csql.l"
{ return KEY; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 168 "us/1csql/1csql.l"
{ return INDEX; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 169 "us/1csql/1csql.l"
{ return INDEX; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 170 "us/1csql/1csql.l"
{ return KEYS; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 171 "us/1csql/1csql.l"
{ return KILL; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 172 "us/1csql/1csql.l"
{ return LEADING; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 173 "us/1csql/1csql.l"
{ return LEAVE; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 174 "us/1csql/1csql.l"
{ return LEFT; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 175 "us/1csql/1csql.l"
{ return LEFT; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 176 "us/1csql/1csql.l"
{ return LIKE; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 177 "us/1csql/1csql.l"
{ return LIKE; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 178 "us/1csql/1csql.l"
{ return LIMIT; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 179 "us/1csql/1csql.l"
{ return LINES; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 180 "us/1csql/1csql.l"
{ return LOAD; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 181 "us/1csql/1csql.l"
{ return LOCALTIME; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 182 "us/1csql/1csql.l"
{ return LOCALTIMESTAMP; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 183 "us/1csql/1csql.l"
{ return LOCK; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 184 "us/1csql/1csql.l"
{ return LONG; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 185 "us/1csql/1csql.l"
{ return LONGBLOB; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 186 "us/1csql/1csql.l"
{ return LONGTEXT; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 187 "us/1csql/1csql.l"
{ return LOOP; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 188 "us/1csql/1csql.l"
{ return LOW_PRIORITY; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 189 "us/1csql/1csql.l"
{ return MATCH; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 190 "us/1csql/1csql.l"
{ return MEDIUMBLOB; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 191 "us/1csql/1csql.l"
{ return MEDIUMINT; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 192 "us/1csql/1csql.l"
{ return MEDIUMTEXT; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 193 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return UNION; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 194 "us/1csql/1csql.l"
{ return MINUTE_MICROSECOND; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 195 "us/1csql/1csql.l"
{ return MINUTE; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 196 "us/1csql/1csql.l"
{ return MINUTE_SECOND; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 197 "us/1csql/1csql.l"
{ return MOD; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 198 "us/1csql/1csql.l"
{ return MODIFIES; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 199 "us/1csql/1csql.l"
{ return MONTH; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 200 "us/1csql/1csql.l"
{ return NATURAL; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 201 "us/1csql/1csql.l"
{ return NONCYCLE; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 202 "us/1csql/1csql.l"
{ return NOT; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 203 "us/1csql/1csql.l"
{ return NOT; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 204 "us/1csql/1csql.l"
{ return NO_WRITE_TO_BINLOG; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 205 "us/1csql/1csql.l"
{ return NULLX; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 206 "us/1csql/1csql.l"
{ return NUMBER; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 207 "us/1csql/1csql.l"
{ return ON; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 208 "us/1csql/1csql.l"
{ return ON; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 209 "us/1csql/1csql.l"
{ return ONDUPLICATE; } /* hack due to limited lookahead */
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 210 "us/1csql/1csql.l"
{ return OPTIMIZE; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 211 "us/1csql/1csql.l"
{ return OPTION; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 212 "us/1csql/1csql.l"
{ return OPTIONALLY; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 213 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return OR; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 214 "us/1csql/1csql.l"
{ yylval.strval = strdup("or"); return OR; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 215 "us/1csql/1csql.l"
{ return ORDER; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 216 "us/1csql/1csql.l"
{ return ORDER; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 217 "us/1csql/1csql.l"
{ return OVER; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 218 "us/1csql/1csql.l"
{ return OUT; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 219 "us/1csql/1csql.l"
{ return OUTER; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 220 "us/1csql/1csql.l"
{ return OUTER; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 221 "us/1csql/1csql.l"
{ return OUTFILE; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 222 "us/1csql/1csql.l"
{ return PARTITION; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 223 "us/1csql/1csql.l"
{ return PRECEDING; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 224 "us/1csql/1csql.l"
{ return PRECISION; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 225 "us/1csql/1csql.l"
{ return PRIMARY; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 226 "us/1csql/1csql.l"
{ return PRIOR; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 227 "us/1csql/1csql.l"
{ return PROCEDURE; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 228 "us/1csql/1csql.l"
{ return PURGE; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 229 "us/1csql/1csql.l"
{ return QUICK; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 230 "us/1csql/1csql.l"
{ return RANGE; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 231 "us/1csql/1csql.l"
{ return READ; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 232 "us/1csql/1csql.l"
{ return READS; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 233 "us/1csql/1csql.l"
{ return REAL; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 234 "us/1csql/1csql.l"
{ return REFERENCES; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 235 "us/1csql/1csql.l"
{ return REGEXP; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 236 "us/1csql/1csql.l"
{ return RELEASE; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 237 "us/1csql/1csql.l"
{ return RENAME; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 238 "us/1csql/1csql.l"
{ return REPEAT; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 239 "us/1csql/1csql.l"
{ return REPLACE; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 240 "us/1csql/1csql.l"
{ return REQUIRE; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 241 "us/1csql/1csql.l"
{ return RESTRICT; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 242 "us/1csql/1csql.l"
{ return RETURN; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 243 "us/1csql/1csql.l"
{ return REVOKE; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 244 "us/1csql/1csql.l"
{ return RIGHT; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 245 "us/1csql/1csql.l"
{ return RIGHT; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 246 "us/1csql/1csql.l"
{ return ROLLUP; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 247 "us/1csql/1csql.l"
{ return ROWS; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 248 "us/1csql/1csql.l"
{ return ROW; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 249 "us/1csql/1csql.l"
{ return SCHEMA; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 250 "us/1csql/1csql.l"
{ return SCHEMAS; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 251 "us/1csql/1csql.l"
{ return SECOND; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 252 "us/1csql/1csql.l"
{ return SECOND_MICROSECOND; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 253 "us/1csql/1csql.l"
{ return SELECT; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 254 "us/1csql/1csql.l"
{ return SELECT; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 255 "us/1csql/1csql.l"
{ return SENSITIVE; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 256 "us/1csql/1csql.l"
{ return SEPARATOR; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 257 "us/1csql/1csql.l"
{ return SET; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 258 "us/1csql/1csql.l"
{ return SHOW; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 259 "us/1csql/1csql.l"
{ return SMALLINT; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 260 "us/1csql/1csql.l"
{ return SOME; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 261 "us/1csql/1csql.l"
{ return SONAME; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 262 "us/1csql/1csql.l"
{ return SPATIAL; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 263 "us/1csql/1csql.l"
{ return SPECIFIC; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 264 "us/1csql/1csql.l"
{ return SQL; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 265 "us/1csql/1csql.l"
{ return SQLEXCEPTION; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 266 "us/1csql/1csql.l"
{ return SQLSTATE; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 267 "us/1csql/1csql.l"
{ return SQLWARNING; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 268 "us/1csql/1csql.l"
{ return SQL_BIG_RESULT; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 269 "us/1csql/1csql.l"
{ return SQL_CALC_FOUND_ROWS; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 270 "us/1csql/1csql.l"
{ return SQL_SMALL_RESULT; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 271 "us/1csql/1csql.l"
{ return SSL; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 272 "us/1csql/1csql.l"
{ return START; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 273 "us/1csql/1csql.l"
{ return STARTING; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 274 "us/1csql/1csql.l"
{ return STRAIGHT_JOIN; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 275 "us/1csql/1csql.l"
{ return TABLE; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 276 "us/1csql/1csql.l"
{ return TEMPORARY; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 277 "us/1csql/1csql.l"
{ return TERMINATED; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 278 "us/1csql/1csql.l"
{ return TEXT; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 279 "us/1csql/1csql.l"
{ return THEN; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 280 "us/1csql/1csql.l"
{ return THEN; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 281 "us/1csql/1csql.l"
{ return TIME; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 282 "us/1csql/1csql.l"
{ return TIMESTAMP; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 283 "us/1csql/1csql.l"
{ return TINYINT; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 284 "us/1csql/1csql.l"
{ return TINYTEXT; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 285 "us/1csql/1csql.l"
{ return TO; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 286 "us/1csql/1csql.l"
{ return TOTAL; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 287 "us/1csql/1csql.l"
{ return TOTAL; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 288 "us/1csql/1csql.l"
{ return TRAILING; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 289 "us/1csql/1csql.l"
{ return TRIGGER; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 290 "us/1csql/1csql.l"
{ return UNDO; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 291 "us/1csql/1csql.l"
{ return UNBOUNDED; }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 292 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return UNION; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 293 "us/1csql/1csql.l"
{ yylval.strval = strdup("union"); return UNION; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 294 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return UNION; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 295 "us/1csql/1csql.l"
{ yylval.strval = strdup("union all"); return UNION; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 296 "us/1csql/1csql.l"
{ return UNIQUE; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 297 "us/1csql/1csql.l"
{ return UNLOCK; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 298 "us/1csql/1csql.l"
{ return UNSIGNED; }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 299 "us/1csql/1csql.l"
{ return UPDATE; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 300 "us/1csql/1csql.l"
{ return UPDATE; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 301 "us/1csql/1csql.l"
{ return USAGE; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 302 "us/1csql/1csql.l"
{ return USE; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 303 "us/1csql/1csql.l"
{ return USING; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 304 "us/1csql/1csql.l"
{ return UTC_DATE; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 305 "us/1csql/1csql.l"
{ return UTC_TIME; }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 306 "us/1csql/1csql.l"
{ return UTC_TIMESTAMP; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 307 "us/1csql/1csql.l"
{ return VALUES; }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 308 "us/1csql/1csql.l"
{ return VARBINARY; }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 309 "us/1csql/1csql.l"
{ return VARCHAR; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 310 "us/1csql/1csql.l"
{ return VARYING; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 311 "us/1csql/1csql.l"
{ return WHEN; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 312 "us/1csql/1csql.l"
{ return WHEN; }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 313 "us/1csql/1csql.l"
{ return WHERE; }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 314 "us/1csql/1csql.l"
{ return WHERE; }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 315 "us/1csql/1csql.l"
{ return WHILE; }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 316 "us/1csql/1csql.l"
{ return WITH; }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 317 "us/1csql/1csql.l"
{ return WRITE; }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 318 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return XOR; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 319 "us/1csql/1csql.l"
{ return YEAR; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 320 "us/1csql/1csql.l"
{ return YEAR_MONTH; }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 321 "us/1csql/1csql.l"
{ return ZEROFILL; }
	YY_BREAK
/* numbers */
case 284:
YY_RULE_SETUP
#line 325 "us/1csql/1csql.l"
{ yylval.intval = atoi(yytext); return INTNUM; } 
	YY_BREAK
case 285:
#line 328 "us/1csql/1csql.l"
case 286:
#line 329 "us/1csql/1csql.l"
case 287:
#line 330 "us/1csql/1csql.l"
case 288:
#line 331 "us/1csql/1csql.l"
case 289:
YY_RULE_SETUP
#line 331 "us/1csql/1csql.l"
{ yylval.floatval = atof(yytext) ;
                                  return APPROXNUM; }
	YY_BREAK
/* booleans */
case 290:
YY_RULE_SETUP
#line 334 "us/1csql/1csql.l"
{ yylval.boolval = true; return BOOL; }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 335 "us/1csql/1csql.l"
{ yylval.boolval = false; return BOOL; }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 336 "us/1csql/1csql.l"
{ yylval.boolval = false; return BOOL; }
	YY_BREAK
/* strings */
case 293:
YY_RULE_SETUP
#line 340 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 341 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
case 295:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 343 "us/1csql/1csql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
case 296:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 344 "us/1csql/1csql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
/* hex strings */
case 297:
#line 348 "us/1csql/1csql.l"
case 298:
YY_RULE_SETUP
#line 348 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
/* bit strings */
case 299:
#line 353 "us/1csql/1csql.l"
case 300:
YY_RULE_SETUP
#line 353 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
/* name followed by the dot */
case 301:
YY_RULE_SETUP
#line 356 "us/1csql/1csql.l"
{ oldstate.push_back(YY_START); BEGIN DOT_NAME; return yytext[0]; }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 357 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); yylval.qpsz = newQuot_psz(yytext, false); return NAME; }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 358 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); yylval.qpsz = newQuot_psz(true); yylval.qpsz->psz = (char*)malloc(strlen(yytext)-1); memset(yylval.qpsz->psz, '\0', strlen(yytext)-1); strncpy(yylval.qpsz->psz, yytext+1, strlen(yytext)-2); return NAME; }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 359 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); yylval.qpsz = newQuot_psz(yytext, false); return NAME; }
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 360 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); return '('; }
	YY_BREAK
/* operators */
case 306:
YY_RULE_SETUP
#line 363 "us/1csql/1csql.l"
{ return yytext[0]; }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 365 "us/1csql/1csql.l"
{ return ANDOP; }
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 366 "us/1csql/1csql.l"
{ return CONCAT; }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 368 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 369 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 370 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 371 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 372 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 373 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 315:
#line 375 "us/1csql/1csql.l"
case 316:
YY_RULE_SETUP
#line 375 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext); return COMPARISON; }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 376 "us/1csql/1csql.l"
{ return PARASSIGN; }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 378 "us/1csql/1csql.l"
{ return OUTPLUS; }
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 380 "us/1csql/1csql.l"
{ yylval.subtok = 1; return SHIFT; }
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 381 "us/1csql/1csql.l"
{ yylval.subtok = 2; return SHIFT; }
	YY_BREAK
/* functions */
case 321:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 385 "us/1csql/1csql.l"
{ return FSUBSTRING; }
	YY_BREAK
case 322:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 386 "us/1csql/1csql.l"
{ return FTRIM; }
	YY_BREAK
case 323:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 387 "us/1csql/1csql.l"
{ return FDATE_ADD; }
	YY_BREAK
case 324:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 388 "us/1csql/1csql.l"
{ return FDATE_SUB; }
	YY_BREAK
case 325:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 389 "us/1csql/1csql.l"
{ return FEXPRESS; }
	YY_BREAK
case 326:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 390 "us/1csql/1csql.l"
{ return FCOUNT; }
	YY_BREAK
case 327:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 391 "us/1csql/1csql.l"
{ return FCOUNT; }
	YY_BREAK
/* 
         * peek ahead and return function if name(
         */
case 328:
YY_RULE_SETUP
#line 398 "us/1csql/1csql.l"
{ yylval.qpsz = newQuot_psz(yytext, false);
                          return NAME; }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 400 "us/1csql/1csql.l"
{ yylval.qpsz = newQuot_psz(yytext+1, false);
						  yylval.qpsz->psz[yyleng-2] = 0;
                          return NAME; }
	YY_BREAK
case 330:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 404 "us/1csql/1csql.l"
{ yyerror("unterminated quoted name %s", yytext); }
	YY_BREAK
/* user variables */
case 331:
#line 408 "us/1csql/1csql.l"
case 332:
#line 409 "us/1csql/1csql.l"
case 333:
#line 410 "us/1csql/1csql.l"
case 334:
#line 411 "us/1csql/1csql.l"
case 335:
YY_RULE_SETUP
#line 411 "us/1csql/1csql.l"
{ yylval.strval = strdup(yytext+1); return USERVAR; }
	YY_BREAK
case 336:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 413 "us/1csql/1csql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 337:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 414 "us/1csql/1csql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 338:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 415 "us/1csql/1csql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 418 "us/1csql/1csql.l"
{ return ASSIGN; }
	YY_BREAK
/* comments */   
case 340:
YY_RULE_SETUP
#line 421 "us/1csql/1csql.l"
;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 422 "us/1csql/1csql.l"
;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 423 "us/1csql/1csql.l"
;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 425 "us/1csql/1csql.l"
{ oldstate.push_back(YY_START); BEGIN COMMENT; }
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 426 "us/1csql/1csql.l"
{ BEGIN oldstate[oldstate.size()-1]; oldstate.pop_back(); }
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 427 "us/1csql/1csql.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 428 "us/1csql/1csql.l"
{ yyerror("unclosed comment"); }
	YY_BREAK
/* everything else */
case 346:
YY_RULE_SETUP
#line 431 "us/1csql/1csql.l"
/* white space */
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 432 "us/1csql/1csql.l"
{ yyerror("mystery character '%c'", *yytext); }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 434 "us/1csql/1csql.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3590 "us\\1csql\\1csql.lex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(DOT_NAME):
			case YY_STATE_EOF(BTWMODE):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1494 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1494 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1493);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 434 "us/1csql/1csql.l"


